MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPfallbacks"
Content-Type: application/external-reference

.OPfallbacks

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPdummydefs"
Content-Type: application/external-reference

.OPdummydefs

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Top

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = labs::wedge::1.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

comment ""
position -0.224632 -9.57096
connectornextid 0
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress off colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author christoss@oxbow
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.inp"
Content-Type: text/plain

1
0 0 6 2 0 __NO_OWNER_NETWORK_BOX__ "FROMOUTPUT"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.init"
Content-Type: text/plain

type = pythonprocessor
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.def"
Content-Type: text/plain

comment "Custom wedge node"
position -0.5 3.9098
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render on highlight off unload off savedata off compress off colordefault on exposed on displaycomment on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	(0) "" 1 "input1"
}
inputs
{
0 	(0) 0 1
}
stat
{
  create -1
  modify -1
  author ati@pop-os.localdomain
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.multiparm"
Content-Type: text/plain

10
attrib# ../attrib#
wedgetype# ../wedgetype#
minvalue# ../minvalue#
maxvalue# ../maxvalue#
randomseed# ../randomseed#
batchsize# ../batchsize#
periodsize# ../periodsize#
values# ../values#
geopath# ../geopath#
valuesdefault# ../valuesdefault#

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.spareparmdef"
Content-Type: text/plain

    parm {
        name    "savenodescript"
        baseparm
        label   "Save to Python Script"
        joinnext
        export  none
    }
    parm {
        name    "savenodehda"
        baseparm
        label   "Save to Digital Asset"
        export  none
    }
    parm {
        name    "sepparm2"
        baseparm
        label   "Separator"
        export  none
    }
    group {
        name    "processor4"
        label   "Processor"

        parm {
            name    "pdg_workitemgeneration"
            baseparm
            label   "Generate When"
            export  none
        }
        parm {
            name    "pdg_command"
            baseparm
            label   "Command"
            export  none
        }
        parm {
            name    "sepparm"
            baseparm
            label   "Separator"
            export  none
        }
        group {
            name    "callbacks6"
            label   "Generate"

            parm {
                name    "generate"
                baseparm
                label   "onGenerate Callback"
                export  none
            }
        }

        group {
            name    "callbacks6_1"
            label   "Regenerate"

            parm {
                name    "useregeneratestatic"
                baseparm
                label   "Use Custom Regenerate Implementation"
                export  none
            }
            parm {
                name    "regeneratestatic"
                baseparm
                label   "onRegenerate Callback"
                export  none
            }
        }

        group {
            name    "callbacks6_2"
            label   "Add Internal Dependencies"

            parm {
                name    "addinternaldependencies"
                baseparm
                label   "onAddInternalDependencies Callback"
                export  none
            }
        }

        group {
            name    "callbacks6_3"
            label   "Cook Task"

            parm {
                name    "cooktask"
                baseparm
                label   "onCookTask Callback"
                export  none
            }
        }

        group {
            name    "callbacks6_4"
            label   "Node Options"

            parm {
                name    "servicename"
                baseparm
                label   "Service Name"
                export  none
            }
            parm {
                name    "sepparm3"
                baseparm
                label   "Separator"
                export  none
            }
            parm {
                name    "alwaysregenerate"
                baseparm
                label   "Always Regenerate"
                export  none
            }
            parm {
                name    "dirtyonregenerate"
                baseparm
                label   "Dirty on Regenerate"
                export  none
            }
            parm {
                name    "dirtyonincomplete"
                baseparm
                label   "Dirty on Incomplete"
                export  none
            }
            parm {
                name    "sepparm4"
                baseparm
                label   "Separator"
                export  none
            }
            parm {
                name    "requiresgeneratedinputs"
                baseparm
                label   "Requires Generated Inputs"
                export  none
            }
            parm {
                name    "requiresscenefile"
                baseparm
                label   "Requires Scene File"
                export  none
            }
        }

    }

    group {
        name    "processor4_1"
        label   "Files"

        multiparm {
            name    "pdgnodedeps"
            label    "File Dependencies"
            baseparm
            default 1

            parm {
                name    "pdgnodedep#"
                baseparm
                label   "File Path"
                export  none
            }
        }

    }

    group {
        name    "processor4_2"
        label   "Schedulers"

        parm {
            name    "topscheduler"
            baseparm
            label   "TOP Scheduler Override"
            joinnext
            export  none
        }
        parm {
            name    "addjobparms"
            baseparm
            label   "Add Job Parms"
            nolabel
            export  none
        }
        parm {
            name    "sepparm5"
            baseparm
            label   "Separator"
            export  none
        }
        parm {
            name    "pdg_workitemlabel"
            baseparm
            label   "Work Item Label"
            joinnext
            export  none
        }
        parm {
            name    "pdg_workitemlabelexpr"
            baseparm
            label   "Label Expression"
            nolabel
            export  none
        }
        parm {
            name    "pdg_workitempriority"
            baseparm
            label   "Work Item Priority"
            joinnext
            export  none
        }
        parm {
            name    "pdg_workitempriorityexpr"
            baseparm
            label   "Priority Expression"
            nolabel
            export  none
        }
    }

    parm {
        name    "wedgecount"
        label   "Wedge Count"
        type    integer
        default { "1" }
        range   { 1! 50 }
        parmtag { "autoscope" "0000000000000000" }
        parmtag { "script_callback_language" "python" }
    }
    multiparm {
        name    "nwedgeattribs"
        label    "Number of Attributes"
        default 0
        parmtag { "autoscope" "0000000000000000" }
        parmtag { "autoselect" "0000000000000000" }
        parmtag { "multistartoffset" "1" }

        groupcollapsible {
            name    "folder4_#"
            label   "Attribute #"
            grouptag { "sidefx::header_parm" "attrib#" }

            parm {
                name    "attrib#"
                label   "Attribute Name"
                type    string
                joinnext
                default { "wedgeattribute#" }
            }
            parm {
                name    "wedgetype#"
                label   "Wedge Type"
                type    ordinal
                nolabel
                default { "0" }
                menu {
                    "auto"      "Automatic"
                    "range"     "Custom Range"
                    "rand"      "Random Sample"
                    "batch"     "Batched Sequence"
                    "periodic"  "Periodic Sequence"
                    "list"      "Specific Values"
                    "attrib"    "Attribute Values"
                }
            }
            parm {
                name    "minvalue#"
                label   "Min Value"
                type    float
                default { "0" }
                hidewhen "{ wedgetype# != range wedgetype# != rand wedgetype# != batch wedgetype# != periodic }"
                range   { 0 10 }
            }
            parm {
                name    "maxvalue#"
                label   "Max Value"
                type    float
                default { "1" }
                hidewhen "{ wedgetype# != range wedgetype# != rand wedgetype# != batch wedgetype# != periodic }"
                range   { 0 10 }
            }
            parm {
                name    "randomseed#"
                label   "Seed"
                type    integer
                default { "0" }
                hidewhen "{ wedgetype# != rand }"
                range   { 0! 100 }
                parmtag { "autoscope" "0000000000000000" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "batchsize#"
                label   "Batch Size"
                type    integer
                default { "1" }
                hidewhen "{ wedgetype# != batch }"
                range   { 1! 10 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "periodsize#"
                label   "Period Size"
                type    integer
                default { "1" }
                hidewhen "{ wedgetype# != periodic }"
                range   { 1! 10 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "values#"
                label   "List of Values"
                type    string
                default { "0-1" }
                hidewhen "{ wedgetype# != list }"
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "geopath#"
                label   "Geometry Path"
                type    oppath
                default { "" }
                hidewhen "{ wedgetype# != attrib }"
                parmtag { "opfilter" "!!SOP!!" }
                parmtag { "oprelative" "." }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "valuesdefault#"
                label   "Default Value"
                type    float
                default { "0" }
                hidewhen "{ wedgetype# != list wedgetype# != attrib }"
                range   { 0 10 }
            }
        }

    }


--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.chn"
Content-Type: text/plain

{
    channel wedgecount {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../wedgecount\") }
    }
    channel nwedgeattribs {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../nwedgeattribs\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.parm"
Content-Type: text/plain

{
version 0.8
savenodescript	[ 0	locks=0 ]	(	0	)
savenodehda	[ 0	locks=0 ]	(	0	)
sepparm2	[ 0	locks=0 ]	(	)
processor	[ 0	locks=0 ]	(	0	0	0	)
pdg_workitemgeneration	[ 0	locks=0 ]	(	"2"	)
pdg_command	[ 0	locks=0 ]	(	""	)
sepparm	[ 0	locks=0 ]	(	)
callbacks	[ 0	locks=0 ]	(	0	0	0	0	0	)
generate	[ 0	locks=0 ]	(	"# Called when this node should generate new work items from upstream items.
#
# self             -   A reference to the current pdg.Node instance
# item_holder      -   A pdg.WorkItemHolder for constructing and adding work items
# upstream_items   -   The list of work items in the node above, or empty list if there are no inputs
# generation_type  -   The type of generation, e.g. pdg.generationType.Static, Dynamic, or Regenerate

import hou
import pdg
import random
node = hou.pwd()

def pad(l, content, width):
    l.extend([content] * (width - len(l)))
    return l
    
# Build list of elements based on user choice.

def defaultValues(attribname,nwedges,default):
    values = [default] * nwedges
    metas = []
    metas.append(attribname)
    metas.append(hou.attribData.Float)    
    return values, metas

def buildValues(nwedges, nattribs):
    attribs = []
    metas   = []
    for i in range(0,nattribs):
        values = []
        meta   = []
        stri   = str(i+1)    
        attribname  = node.evalParm('attrib' + stri)    
        wedgetype   = node.evalParm('wedgetype' + stri)
            
        # Automatic
        # 0 to 'Wedge Count'
        if wedgetype == 0:
            for wedge in range(0,nwedges):
                values.append(wedge)
                
            meta.append(attribname)
            meta.append(hou.attribData.Float)
            metas.append(meta)
            attribs.append(values)  
            
        # Custom Range
        # Sequence equally spaced and between min and max
        elif wedgetype == 1: 
            min = node.evalParm('minvalue' + stri)
            max = node.evalParm('maxvalue' + stri)
            
            for wedge in range(0,nwedges):
                value = hou.hmath.fit(wedge,0,nwedges-1,min,max)
                values.append(value)
                
            meta.append(attribname)
            meta.append(hou.attribData.Float)
            metas.append(meta)
            attribs.append(values) 
            
        # Random Sample  
        # Random sample between min and max
        elif wedgetype == 2:    
            min = node.evalParm('minvalue' + stri)
            max = node.evalParm('maxvalue' + stri)        
            seed = node.evalParm('randomseed' + stri)   
            
            for wedge in range(0,nwedges):
                value = hou.hmath.fit01(hou.hmath.rand(wedge + seed),min,max)    
                values.append(value)

            meta.append(attribname)
            meta.append(hou.attribData.Float)
            metas.append(meta)
            attribs.append(values) 
            
        # Batched Sequence
        # 000 111 222 ...
        elif wedgetype == 3:
            min = node.evalParm('minvalue' + stri)
            max = node.evalParm('maxvalue' + stri)                   
            batchsize = node.evalParm('batchsize' + stri)  
            
            nbatchsize =  float(nwedges / batchsize)
            
            for wedge in range(0,nwedges):
                value = hou.hmath.fit(wedge%nbatchsize,0,nbatchsize-1,min,max) 
                value = hou.hmath.fit(floor((wedge) / nbatchsize),0,batchsize-1,min,max)  
                values.append(value)
                    
            meta.append(attribname)
            meta.append(hou.attribData.Float)
            metas.append(meta)
            attribs.append(values)   
            
        # Periodic Sequence
        # 012 012 012 ...
        elif wedgetype == 4:
            min = node.evalParm('minvalue' + stri)
            max = node.evalParm('maxvalue' + stri)
            periodsize = node.evalParm('periodsize' + stri) 
            
            for wedge in range(0,nwedges):
                value = wedge % periodsize                
                value = hou.hmath.fit(value,0,periodsize-1,min,max)
                values.append(value)      

            meta.append(attribname)
            meta.append(hou.attribData.Float)
            metas.append(meta)
            attribs.append(values)            
            
        # List of Values             
        elif wedgetype == 5: 
            list = node.evalParm('values' + stri)
            default = node.evalParm('valuesdefault' + stri)
            
            pattern = pdg.ValuePattern(list)
            values = pattern.floatArray(inclusive=True)
         
            if len(values) < nwedges:
                values = values + [default] * (nwedges - len(values))                
           
            meta.append(attribname)
            meta.append(hou.attribData.Float)
            metas.append(meta)
            attribs.append(values)   
            
        # From geometry attributes  
        # Supports point and primitive attributes
        # Supports float,int,string            
        else:
            geonode = node.parm('geopath' + stri).evalAsNode()
            default = node.evalParm('valuesdefault' + stri)
            if not geonode:
                values, meta = defaultValues(attribname,nwedges,default)
                attribs.append(values)
                metas.append(meta)
                continue  
            
            geonode.cook(force=True)
            geo = geonode.geometry()  
            
            if not geo:
                values, meta = defaultValues(attribname,nwedges,default)
                attribs.append(values)
                metas.append(meta)
                continue 
                
            attrib = geo.findPointAttrib(attribname)
            if not attrib:
                attrib = geo.findPrimAttrib(attribname)               
                if not attrib: # No attribute found.
                    values, meta = defaultValues(attribname,nwedges,default)
                    attribs.append(values)
                    metas.append(meta)
                    continue 
                    
            # Array types not supported.        
            if attrib.isArrayType():
                values, meta = defaultValues(attribname,nwedges,default)        
                attribs.append(values)
                metas.append(meta)               
           
            if attrib.type() == hou.attribType.Point:
                for point in geo.points():            
                    values.append(point.attribValue(attrib))      
            else:
                for prim in geo.prims():
                    values.append(prim.attirbVaue(attirb))
                    
            # Pad values if the number of elements is less then the number of wedges.
            if len(values) < nwedges:
                pad(values,attrib.defaultValue(),nwedges)
                
            meta.append(attribname)
            meta.append(attrib.dataType())            
            metas.append(meta)
            attribs.append(values)         
    
    return attribs, metas

def constructWorkItems(nwedges, niters, nattribs, attribnames, metas, values, clone=False, upstream_item=None, upstream_index=None):

    # Create wedges the given number of times, however if we have inputs with wedges, just copy the input,
    # so niters == 1 in that case.
    for j in range(0,niters): # new item per wedge   
        new_item = None
        # The lookup index to the array attribute has to be changed when cloning the input.
        # In this case use the wedgenum attribute to distribute the newly wedged values.
        lookup = j
        if clone:
            if upstream_index > 0:
                lookup = upstream_index
            new_item = item_holder.addWorkItem(cloneResultData=True,
                                               preserveType=True,
                                               parent=upstream_item)                                               
        else:
            new_item = item_holder.addWorkItem(index=j)
            
        new_item.setIntAttrib('wedgecount',nwedges)
        new_item.setIntAttrib('wedgetotal',nwedges)
        new_item.setIntAttrib('wedgeindex',lookup)
        new_item.setIntAttrib('wedgenum',lookup)
        
        if attribnames:
            new_item.setStringAttrib('wedgeattribs',attribnames)
        
        
        for i in range(0,nattribs): # assign attributes
            stri = str(i+1) 
            attribname = metas[i][0]
            attribtype = metas[i][1]
            if attribtype == hou.attribData.Float:
                new_item.setFloatAttrib(attribname,values[i][lookup])
            if attribtype == hou.attribData.Int:
                new_item.setIntAttrib(attribname,values[i][lookup])
            if attribtype == hou.attribData.String:
                new_item.setStringAttrib(attribname,values[i][lookup])   
                
def generate(nwedges, nattribs):
    values, metas = buildValues(nwedges, nattribs) 
    
    niters = nwedges
    
    attribnames = []
    for meta in metas:
        attribname = meta[0]
        if attribname:
            attribnames.append(meta[0])  
              
    if upstream_items:
        for upstream_item in upstream_items:          
            if upstream_item.attrib('wedgetotal') is not None:
                niters = 1   
                
            upstream_wedgenmum = 0
            if upstream_item.attrib('wedgenum'):
                upstream_wedgenmum = upstream_item.intAttribValue('wedgenum')
            constructWorkItems(nwedges, niters, nattribs, attribnames, metas, values, clone=True, upstream_item=upstream_item, upstream_index=upstream_wedgenmum)
    else:
        constructWorkItems(nwedges, niters, nattribs, attribnames, metas, values, clone=False)      

nwedges = node.evalParm(\"wedgecount\")
nattribs = node.evalParm(\"nwedgeattribs\")

generate(nwedges,nattribs)  "	)
useregeneratestatic	[ 0	locks=0 ]	(	"off"	)
regeneratestatic	[ 0	locks=0 ]	(	"# Called when this node may need to regenerate existing work items
#
# self           -   A reference to the current pdg.Node instance
# item_holder    -   A pdg.WorkItemHolder for constructing and adding new work items
# existing_items -   The existing work items in the node
# upstream_items -   The list of work items in the node above, or empty list
# generation_type -   The type of generation, e.g. pdg.generationType.Static, Dynamic, or Regenerate"	)
addinternaldependencies	[ 0	locks=0 ]	(	"# Called when the node has generated work items so that dependencies can
# be added between work items in this node.
#
# self              -   A reference to the current pdg.Node instance
# dependency_holder -   A pdg.WorkItemHolder for adding pairs of items that should have a dependency
# internal_items    -   The list of items, either all static items or a group of dynamic items
# is_static         -   Boolean indicating if the items list contains static items
"	)
cooktask	[ 0	locks=0 ]	(	"# Called when an in process work item needs to cook. In process work items
# are created by passing the `inProcess=True` flag when constructing the item in
# the `Generate` callback
#
# self              -   A reference to the current pdg.Node instance
# work_item         -   The work item being cooked by this callback"	)
servicename	[ 0	locks=0 ]	(	""	)
sepparm3	[ 0	locks=0 ]	(	)
alwaysregenerate	[ 0	locks=0 ]	(	"off"	)
dirtyonregenerate	[ 0	locks=0 ]	(	"off"	)
dirtyonincomplete	[ 0	locks=0 ]	(	"off"	)
sepparm4	[ 0	locks=0 ]	(	)
requiresgeneratedinputs	[ 0	locks=0 ]	(	"off"	)
requiresscenefile	[ 0	locks=0 ]	(	"off"	)
pdgnodedeps	[ 0	locks=0 ]	(	1	)
topscheduler	[ 0	locks=0 ]	(	""	)
addjobparms	[ 0	locks=0 ]	(	0	)
sepparm5	[ 0	locks=0 ]	(	)
pdg_workitemlabel	[ 0	locks=0 ]	(	"0"	)
pdg_workitemlabelexpr	[ 0	locks=0 ]	(	""	)
pdg_workitempriority	[ 0	locks=0 ]	(	"0"	)
pdg_workitempriorityexpr	[ 0	locks=0 ]	(	0	)
pdgnodedep1	[ 0	locks=0 ]	(	""	)
processor4	[ 0	locks=0 ]	(	0	0	0	)
callbacks6	[ 0	locks=0 ]	(	0	0	0	0	0	)
wedgecount	[ 0	locks=0 ]	(	[ wedgecount	1 ] 	)
nwedgeattribs	[ 0	locks=0 ]	(	[ nwedgeattribs	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/custom_wedge.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

comment ""
position -0.5 0.9098
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display on render off highlight off unload off savedata off compress off colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	custom_wedge 0 1 "input1"
}
inputs
{
0 	custom_wedge 0 1
}
stat
{
  create -1
  modify -1
  author ati@pop-os.localdomain
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
pdg_workitemlabel	[ 0	locks=0 ]	(	"0"	)
pdg_workitemlabelexpr	[ 0	locks=0 ]	(	""	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

2
custom_wedge
output0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
