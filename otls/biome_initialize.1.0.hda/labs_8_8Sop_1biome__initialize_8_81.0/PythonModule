import biomeutils

#################################################################################################
#Refresh Attribute Values for Mesh with Attributes
#Script that finds unique values from the Attribute Name parameter to store and refer to later
#Running this script as needed prevents unnecessary calculation times
#################################################################################################
def refreshValues(node):

    inputs = node.inputs()
    uniqueVals = []
    uniqueValsStr = ""
    nameVal = node.parm("attrname").evalAsString()
    
    #Prints message if Attribute Name has not been initialized yet
    if not nameVal:
        print("No attribute name found.")
    
    #Only runs if the second input is wired in
    elif inputs and inputs[1]:
        geo = inputs[1].geometry()
        
        #Looks through prims and finds the Attribute Name values and populates the list if they're unique
        if geo:
            prims = geo.prims()
            
            for p in prims:
                attrVal = p.attribValue(nameVal)
                
                if attrVal not in uniqueVals:
                    uniqueVals.append(attrVal)
                    
    #We store the results on an invisible parm in the HDA, so must be converted to a string to match the data type
    for u in uniqueVals:
        uniqueValsStr += str(u) + ","
    node.parm("attribvalcontainer").set(uniqueValsStr)
    
#######################################################################
#Button to load unique values of selected attribute
#######################################################################    
def loadValues(node):
    inputs = node.inputs()
    uniqueVals = []

    if inputs and inputs[1]:
        uniqueVals = node.parm("attribvalcontainer").eval()
        #Formatting list from the stored string value into correct data type, so we eliminate unecessary characters
        uniqueVals = list(uniqueVals.split(","))
        uniqueVals = uniqueVals[:-1]            #Last value using split is empty, so we remove it
        
        
        node.parm("fd_attribute").set(len(uniqueVals))
        
        count = 1
        #print("attrval" + str(count))
        for u in uniqueVals:
            node.parm("attrvalue" + str(count)).set(u)
            count += 1
            


        
#######################################################################
#Button to create curve setup node for curve option in biome input
#######################################################################
def createCurveNode(node):
    parent = node.parent()
    createNext = parent.createNode('labs::biome_curve_setup')
    
    node.setInput(1, createNext, 0)
    parent.layoutChildren([node, createNext])

#######################################################################
#Cook node
#######################################################################  
def cookNode(node):
    node.cook(force=True)
    
#######################################################################
#Generate colors from images
#######################################################################  
def generateColors(node):
    HDAnode = hou.node(".")
    colorNum = node.geometry().attribValue('number_of_colors') + 1
    HDAnode.parm('fd_extractcol').set(colorNum)
    geo = node.geometry()

    #constructing parameter name from HDA
    colorParm = 'extcolor'
    #iteration = str(node.input(1).geometry().attribValue('iteration') + 1)
    for i in range(colorNum):
        iteration = str(i + 1)
 
        colR = colorParm + iteration + "r"
        colG = colorParm + iteration + "g"
        colB = colorParm + iteration + "b"
    
        #extract colors from input
        color = geo.attribValue('unique_color' + iteration)
    
        #set color parameter to extracted color values
        HDAnode.parm(colR).set(color[0])
        HDAnode.parm(colG).set(color[1])
        HDAnode.parm(colB).set(color[2])

def setBiomeName(node):
    file_path = node.parm('biomeprofile').eval()
  
    if file_path:
        list = biomeutils.biomeNames(file_path)
    
    else:
        print('Warning: No Biome Profile has been set.')
        list = ''
        
    return list
