MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = labs::av_analyze_images::5.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -0.5 3.85
connectornextid 0
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author christoss@oxbow
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.inp"
Content-Type: text/plain

1
0 3.0511114656301137 7.293076181933996 2 0 __NO_OWNER_NETWORK_BOX__ "FROMOUTPUT"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/02_Feature_Extraction.init"
Content-Type: text/plain

type = python
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/02_Feature_Extraction.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 5.2176
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	(0) "" 1 "input1"
}
inputs
{
0 	(0) 0 1
}
stat
{
  create -1
  modify -1
  author prisms@NEWPORT
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/02_Feature_Extraction.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"import hou, subprocess, os, shutil, labutils, alicevisionutils

node = hou.pwd()
geo = node.geometry()

bin = geo.attribValue(\"bin\")
cache = geo.attribValue(\"cache\")
srcimg = geo.attribValue(\"src_img\")

labutils.empty_directory_recursive(os.path.join(cache, \"02_FeatureExtraction\"))

func = \"aliceVision_featureExtraction\"

cmd = os.path.join(bin,func)  
cmd = [cmd]

cmd.append(\"--input\")
cmd.append(os.path.join(cache, \"01_CameraInit\",\"cameraInit.sfm\"))

cmd.append(\"--output\")
cmd.append(os.path.join(cache, \"02_FeatureExtraction\"))

cmd.append(\"--verboseLevel\")
cmd.append(\"Error\")

HDA = node.parent()
ArgumentParameters = [\"rangeStart\", \"rangeSize\", \"describerTypes\", \"describerPreset\", \"describerQuality\", \"gridFiltering\", \"maxNbFeatures\", \"contrastFiltering\", \"relativePeakThreshold\", \"forceCpuExtraction\", \"maxThreads\"]

for argument in ArgumentParameters:
    cmd.append(\"--{}\".format(argument))
    parm = HDA.parm(argument)
    cmd.append(alicevisionutils.evaluateparmtoargument(HDA, parm))
     
alicevisionutils.process(cmd, cache, \"02_FeatureExtraction\", node) "	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/02_Feature_Extraction.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/03_Image_Matching.init"
Content-Type: text/plain

type = python
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/03_Image_Matching.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 4.2176
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	02_Feature_Extraction 1 1 "input1"
}
inputs
{
0 	02_Feature_Extraction 0 1
}
stat
{
  create -1
  modify -1
  author prisms@NEWPORT
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/03_Image_Matching.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"import hou, subprocess, os, shutil, labutils, alicevisionutils

node = hou.pwd()
geo = node.geometry()

bin = geo.attribValue(\"bin\")
cache = geo.attribValue(\"cache\")
share = geo.attribValue(\"share\")

labutils.empty_directory_recursive(os.path.join(cache, \"03_ImageMatching\"))

func = \"aliceVision_imageMatching\"

cmd = os.path.join(bin, func) 
cmd = [cmd]

cmd.append(\"--input\")
cmd.append(os.path.join(cache, \"01_CameraInit\", \"cameraInit.sfm\"))

cmd.append(\"--output\")
cmd.append(os.path.join(cache, \"03_ImageMatching\", \"imageMatches.txt\"))

cmd.append(\"--verboseLevel\")
cmd.append(\"error\")

HDA = node.parent()
ArgumentParameters = [\"minNbImages\", \"maxDescriptors\", \"nbMatches\", \"nbNeighbors\"]

for argument in ArgumentParameters:
    cmd.append(\"--{}\".format(argument))
    parm = HDA.parm(argument)
    cmd.append(alicevisionutils.evaluateparmtoargument(HDA, parm))
    
cmd.append(\"--featuresFolders\") 
cmd.append(os.path.join(cache, \"02_FeatureExtraction\"))

cmd.append(\"--tree\")
cmd.append(os.path.join(share, \"aliceVision\", \"vlfeat_K80L3.SIFT.tree\"))

cmd.append(\"--weights\")
cmd.append(\"\") 


alicevisionutils.process(cmd, cache, \"03_ImageMatching\", node)  "	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/03_Image_Matching.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/04_Feature_Matching.init"
Content-Type: text/plain

type = python
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/04_Feature_Matching.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 5.55112e-17 3.2176
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	03_Image_Matching 1 1 "input1"
}
inputs
{
0 	03_Image_Matching 0 1
}
stat
{
  create -1
  modify -1
  author prisms@NEWPORT
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/04_Feature_Matching.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"import hou, subprocess, os, shutil, labutils, alicevisionutils

node = hou.pwd()
geo = node.geometry()

bin = geo.attribValue(\"bin\")
cache = geo.attribValue(\"cache\")
srcimg = geo.attribValue(\"src_img\")

labutils.empty_directory_recursive(os.path.join(cache, \"04_FeatureMatching\"))

func = \"aliceVision_featureMatching\"

cmd = os.path.join(bin, func) 
cmd = [cmd]

cmd.append(\"--input\")
cmd.append(os.path.join(cache, \"01_CameraInit\", \"cameraInit.sfm\"))

cmd.append(\"--featuresFolders\")
cmd.append(os.path.join(cache, \"02_FeatureExtraction\"))

cmd.append(\"--output\")
cmd.append(os.path.join(cache, \"04_FeatureMatching\"))

cmd.append(\"--rangeSize\")
cmd.append(node.parent().parm(\"rangeSizeMatching\").evalAsString())

cmd.append(\"--rangeStart\") 
cmd.append(node.parent().parm(\"rangeStartMatching\").evalAsString())

cmd.append(\"--verboseLevel\")
cmd.append(\"error\")

HDA = node.parent()
ArgumentParameters = [\"geometricFilterType\", \"describerTypes\", \"photometricMatchingMethod\", \"geometricEstimator\", \"geometricError\", \"matchFromKnownCameraPoses\",
\"knownPosesGeometricErrorMax\", \"savePutativeMatches\", \"guidedMatching\", \"crossMatching\", \"matchFilePerImage\", \"distanceRatio\", \"maxIteration\", \"useGridSort\",
\"exportDebugFiles\", \"maxMatches\", \"randomSeed\"]
 
for argument in ArgumentParameters:
    cmd.append(\"--{}\".format(argument))
    parm = HDA.parm(argument)
    cmd.append(alicevisionutils.evaluateparmtoargument(HDA, parm))
   
cmd.append(\"--imagePairsList\")
cmd.append(os.path.join(cache, \"03_ImageMatching\", \"imageMatches.txt\"))


alicevisionutils.process(cmd, cache, \"04_FeatureMatching\", node)"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/04_Feature_Matching.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 5.09621 3.71745
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	auto_cook 1 1 "input1"
}
inputs
{
0 	auto_cook 0 1
}
stat
{
  create -1
  modify -1
  author Paul_Ambrosiussen@DESKTOP-A0373M3
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/auto_cook.init"
Content-Type: text/plain

type = python
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/auto_cook.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 5.09621 4.99841
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	(0) "" 1 "input1"
}
inputs
{
0 	(0) 0 1
}
stat
{
  create -1
  modify -1
  author Paul_Ambrosiussen@DESKTOP-A0373M3
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/auto_cook.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"node = hou.pwd()
geo = node.geometry()

#file node prevents upstream cooking if in manual mode
manual = node.parent().parm(\"manual_mode\").eval()
if manual == 0:
    avnodes = [\"02_Feature_Extraction\", \"03_Image_Matching\", \"04_Feature_Matching\"]
    for process in avnodes:
        node.parent().node(process).cook(force=True)
       "	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/auto_cook.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

5
02_Feature_Extraction
03_Image_Matching
04_Feature_Matching
output0
auto_cook

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
