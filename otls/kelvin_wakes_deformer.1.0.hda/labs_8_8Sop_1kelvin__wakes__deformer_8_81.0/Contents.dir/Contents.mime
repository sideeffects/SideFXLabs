MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPfallbacks"
Content-Type: application/external-reference

.OPfallbacks

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPdummydefs"
Content-Type: application/external-reference

.OPdummydefs

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = labs::kelvin_wakes_deformer::1.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -0.5 1.85
connectornextid 0
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author christoss@oxbow
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.inp"
Content-Type: text/plain

2
0 5.3555921977221503 0.16031212237173381 2 0 __NO_OWNER_NETWORK_BOX__ "FROMOUTPUT"
1 6.9555921977221509 2.5699121582775724 2 0 __NO_OWNER_NETWORK_BOX__ "FROMOUTPUT"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 11.162 -6.39079
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	switch_target 1 1 "input1"
}
inputs
{
0 	switch_target 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample.init"
Content-Type: text/plain

type = resample
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 8.55559 4.37711
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	first_curve 1 1 "input1"
}
inputs
{
0 	first_curve 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample.chn"
Content-Type: text/plain

{
    channel length {
      lefttype = extend
      righttype = extend
      default = 0.10000000000000001
      flags = 0
      segment { length = 0 value = 0.10000000000000001 0.10000000000000001 expr = "ch(\"../speed\") / $FPS * 0.25" }
    }
    channel treatpolysas {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../treatpolysas\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
maintainprimorder	[ 0	locks=0 ]	(	"off"	)
lod	[ 0	locks=0 ]	(	1	)
edge	[ 0	locks=0 ]	(	"off"	)
method	[ 0	locks=0 ]	(	"dist"	)
measure	[ 0	locks=0 ]	(	"arc"	)
dolength	[ 0	locks=0 ]	(	"on"	)
length	[ 0	locks=0 ]	(	[ length	0.10000000000000001 ] 	)
dosegs	[ 0	locks=0 ]	(	"off"	)
segs	[ 0	locks=0 ]	(	10	)
useattribs	[ 0	locks=0 ]	(	"on"	)
allequal	[ 0	locks=0 ]	(	"on"	)
last	[ 0	locks=0 ]	(	"off"	)
randomshift	[ 0	locks=0 ]	(	"off"	)
onlypoints	[ 0	locks=0 ]	(	"off"	)
treatpolysas	[ 0	locks=0 ]	(	[ treatpolysas	0 ] 	)
outputsubdpoly	[ 0	locks=0 ]	(	"off"	)
doptdistattr	[ 0	locks=0 ]	(	"off"	)
ptdistattr	[ 0	locks=0 ]	(	ptdist	)
dotangentattr	[ 0	locks=0 ]	(	"off"	)
tangentattr	[ 0	locks=0 ]	(	tangentu	)
docurveuattr	[ 0	locks=0 ]	(	"off"	)
curveuattr	[ 0	locks=0 ]	(	curveu	)
docurvenumattr	[ 0	locks=0 ]	(	"off"	)
curvenumattr	[ 0	locks=0 ]	(	curvenum	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/get_length.init"
Content-Type: text/plain

type = measure::2.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/get_length.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 8.55559 2.11811
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	resample_the_sequel 1 1 "input1"
}
inputs
{
0 	resample_the_sequel 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/get_length.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"prims"	)
measurement	[ 0	locks=0 ]	(	0	)
measure	[ 0	locks=0 ]	(	"perimeter"	)
curvaturetype	[ 0	locks=0 ]	(	"curvedness"	)
principaltype	[ 0	locks=0 ]	(	"min"	)
principalsign	[ 0	locks=0 ]	(	"signed"	)
principalreportas	[ 0	locks=0 ]	(	"scalar"	)
umbiliccutoff	[ 0	locks=0 ]	(	0	)
integrationmode	[ 0	locks=0 ]	(	"componentwise"	)
srcattrib	[ 0	locks=0 ]	(	P	)
srccomp	[ 0	locks=0 ]	(	"x"	)
scalenormalize	[ 0	locks=0 ]	(	"on"	)
sepparm	[ 0	locks=0 ]	(	)
integrationdomain	[ 0	locks=0 ]	(	"element"	)
refinetomanifold	[ 0	locks=0 ]	(	"on"	)
pieceattrib	[ 0	locks=0 ]	(	class	)
usecustompos	[ 0	locks=0 ]	(	"off"	)
posattrib	[ 0	locks=0 ]	(	P	)
visrange	[ 0	locks=0 ]	(	0	)
userangemin	[ 0	locks=0 ]	(	"off"	)
rangemin	[ 0	locks=0 ]	(	-1	)
userangemax	[ 0	locks=0 ]	(	"off"	)
rangemax	[ 0	locks=0 ]	(	1	)
usecenterwidth	[ 0	locks=0 ]	(	"off"	)
width	[ 0	locks=0 ]	(	6	)
widthscale	[ 0	locks=0 ]	(	"mad"	)
centertype	[ 0	locks=0 ]	(	"median"	)
fixedcenter	[ 0	locks=0 ]	(	0	)
colorramp	[ 0	locks=0 ]	(	3	)
vectorscale	[ 0	locks=0 ]	(	1	)
output	[ 0	locks=0 ]	(	0	)
attribname	[ 0	locks=0 ]	(	length	)
usetotalattrib	[ 0	locks=0 ]	(	"off"	)
totalattribname	[ 0	locks=0 ]	(	totalperimeter	)
userangegroup	[ 0	locks=0 ]	(	"off"	)
rangegroup	[ 0	locks=0 ]	(	inrange	)
bakeintooutput	[ 0	locks=0 ]	(	"off"	)
useremaprange	[ 0	locks=0 ]	(	"off"	)
remaprange	[ 0	locks=0 ]	(	0	1	)
colorramp1pos	[ 0	locks=0 ]	(	0	)
colorramp1c	[ 0	locks=0 ]	(	0	0	1	)
colorramp1interp	[ 0	locks=0 ]	(	"linear"	)
colorramp2pos	[ 0	locks=0 ]	(	0.5	)
colorramp2c	[ 0	locks=0 ]	(	1	1	1	)
colorramp2interp	[ 0	locks=0 ]	(	"linear"	)
colorramp3pos	[ 0	locks=0 ]	(	1	)
colorramp3c	[ 0	locks=0 ]	(	1	0	0	)
colorramp3interp	[ 0	locks=0 ]	(	"linear"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/get_length.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/first_curve.init"
Content-Type: text/plain

type = blast
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/first_curve.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 8.55559 5.50661
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	(1) "" 1 "input1"
}
inputs
{
0 	(1) 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/first_curve.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	0	)
grouptype	[ 0	locks=0 ]	(	"prims"	)
computenorms	[ 0	locks=0 ]	(	"off"	)
negate	[ 0	locks=0 ]	(	"on"	)
fillhole	[ 0	locks=0 ]	(	"off"	)
removegrp	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/first_curve.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_input.init"
Content-Type: text/plain

type = switch
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_input.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 10.8148 -1.72219
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
2 "output1"
}
inputsNamed3
{
0 	(1) "" 1 "input1"
1 	get_length 1 1 "input2"
}
inputs
{
0 	(1) 0 1
1 	get_length 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 1 0.7 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_input.chn"
Content-Type: text/plain

{
    channel input {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../input\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_input.parm"
Content-Type: text/plain

{
version 0.8
input	[ 0	locks=0 ]	(	[ input	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_input.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.init"
Content-Type: text/plain

type = attribwrangle
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 8.68519 -2.70109
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
2 "output1"
}
inputsNamed3
{
0 	switch_point_coord 2 1 "input1"
1 	switch_input 2 1 "input2"
}
inputs
{
0 	switch_point_coord 0 1
1 	switch_input 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.multiparm"
Content-Type: text/plain

6
magnitude_ramp#pos ../magnitude_ramp#pos
magnitude_ramp#value ../magnitude_ramp#value
magnitude_ramp#interp ../magnitude_ramp#interp
phase_ramp#pos ../phase_ramp#pos
phase_ramp#value ../phase_ramp#value
phase_ramp#interp ../phase_ramp#interp

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.spareparmdef"
Content-Type: text/plain

    group {
        name    "folder1"
        label   "Code"

        parm {
            name    "group"
            baseparm
            label   "Group"
            export  none
            bindselector points "Modify Points"
                "Select the points to affect and press Enter to complete."
                0 1 0xffffffff 0 grouptype 0
        }
        parm {
            name    "grouptype"
            baseparm
            label   "Group Type"
            export  none
        }
        parm {
            name    "class"
            baseparm
            label   "Run Over"
            export  none
        }
        parm {
            name    "vex_numcount"
            baseparm
            label   "Number Count"
            export  none
        }
        parm {
            name    "vex_threadjobsize"
            baseparm
            label   "Thread Job Size"
            export  none
        }
        parm {
            name    "commoncode"
            label   "Common Code"
            type    string
            default { "" }
            parmtag { "editor" "1" }
            parmtag { "editorlang" "vex" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "snippet"
            baseparm
            label   "VEXpression"
            export  all
        }
        parm {
            name    "exportlist"
            baseparm
            label   "Attributes to Create"
            export  none
        }
        parm {
            name    "vex_strict"
            baseparm
            label   "Enforce Prototypes"
            export  none
        }
    }

    group {
        name    "folder1_1"
        label   "Bindings"

        parm {
            name    "autobind"
            baseparm
            label   "Autobind by Name"
            export  none
        }
        multiparm {
            name    "bindings"
            label    "Number of Bindings"
            baseparm
            default 0
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "multistartoffset" "1" }

            parm {
                name    "bindname#"
                baseparm
                label   "Attribute Name"
                export  none
            }
            parm {
                name    "bindparm#"
                baseparm
                label   "VEX Parameter"
                export  none
            }
        }

        parm {
            name    "groupautobind"
            baseparm
            label   "Autobind Groups by Name"
            export  none
        }
        multiparm {
            name    "groupbindings"
            label    "Group Bindings"
            baseparm
            default 0
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "multistartoffset" "1" }

            parm {
                name    "bindgroupname#"
                baseparm
                label   "Group Name"
                export  none
            }
            parm {
                name    "bindgroupparm#"
                baseparm
                label   "VEX Parameter"
                export  none
            }
        }

        parm {
            name    "vex_cwdpath"
            baseparm
            label   "Evaluation Node Path"
            export  none
        }
        parm {
            name    "vex_outputmask"
            baseparm
            label   "Export Parameters"
            export  none
        }
        parm {
            name    "vex_updatenmls"
            baseparm
            label   "Update Normals If Displaced"
            export  none
        }
        parm {
            name    "vex_matchattrib"
            baseparm
            label   "Attribute to Match"
            export  none
        }
        parm {
            name    "vex_inplace"
            baseparm
            label   "Compute Results In Place"
            export  none
        }
        parm {
            name    "vex_selectiongroup"
            baseparm
            label   "Output Selection Group"
            export  none
        }
        parm {
            name    "vex_precision"
            baseparm
            label   "VEX Precision"
            export  none
        }
    }

    parm {
        name    "magnitude_multiplier"
        label   "Magnitude Multiplier"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "phase_offset"
        label   "Phase Offset"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "gravity"
        label   "Gravity"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "blendwidth"
        label   "Blendwidth"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "suppress_radius"
        label   "Suppress Radius"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "speed"
        label   "Speed"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "time"
        label   "Time"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "up_axis"
        label   "Up Axis"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "enable_falloff"
        label   "Enable Falloff"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "relative_falloff"
        label   "Relative Falloff"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "input_type"
        label   "Input Type"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "falloff_range"
        label   "Falloff Range"
        type    vector2
        size    2
        default { "0" "0" }
        range   { 0 1 }
    }
    parm {
        name    "magnitude_ramp"
        label   "Magnitude Ramp"
        type    ramp_flt
        default { "2" }
        range   { 1! 10 }
    }
    parm {
        name    "phase_ramp"
        label   "Phase Ramp"
        type    ramp_flt
        default { "2" }
        range   { 1! 10 }
    }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.chn"
Content-Type: text/plain

{
    channel magnitude_ramp1pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp1pos\") }
    }
    channel magnitude_ramp1value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp1value\") }
    }
    channel magnitude_ramp1interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp1interp\") }
    }
    channel phase_ramp1pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../phase_ramp1pos\") }
    }
    channel phase_ramp1value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../phase_ramp1value\") }
    }
    channel phase_ramp1interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../phase_ramp1interp\") }
    }
    channel magnitude_ramp2pos {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp2pos\") }
    }
    channel magnitude_ramp2value {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp2value\") }
    }
    channel magnitude_ramp2interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp2interp\") }
    }
    channel magnitude_multiplier {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_multiplier\") }
    }
    channel phase_offset {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../phase_offset\") }
    }
    channel gravity {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../gravity\") }
    }
    channel blendwidth {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "1 - ch(\"../edgeblend\")" }
    }
    channel suppress_radius {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../suppress_radius\") }
    }
    channel speed {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../speed\") }
    }
    channel time {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "{
if (ch(\"input_type\") == 0)
    return 0;
else
    return $T - (ch(\"../curvestart\") - 1) / $FPS;
}" }
    }
    channel up_axis {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../normal\") }
    }
    channel enable_falloff {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enable_falloff\") }
    }
    channel relative_falloff {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../relative_falloff\") }
    }
    channel input_type {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../input\") }
    }
    channel falloff_rangex {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../falloff_rangex\") }
    }
    channel falloff_rangey {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../falloff_rangey\") }
    }
    channel magnitude_ramp {
      lefttype = extend
      righttype = extend
      default = 2
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../magnitude_ramp\") }
    }
    channel magnitude_ramp3pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp3pos\") }
    }
    channel magnitude_ramp3value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp3value\") }
    }
    channel magnitude_ramp3interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp3interp\") }
    }
    channel phase_ramp {
      lefttype = extend
      righttype = extend
      default = 2
      flags = 0
      segment { length = 0 value = 3 3 expr = ch(\"../phase_ramp\") }
    }
    channel magnitude_ramp4pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp4pos\") }
    }
    channel magnitude_ramp4value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp4value\") }
    }
    channel magnitude_ramp4interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp4interp\") }
    }
    channel magnitude_ramp5pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp5pos\") }
    }
    channel magnitude_ramp5value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp5value\") }
    }
    channel magnitude_ramp5interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp5interp\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	0	)
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
class	[ 0	locks=0 ]	(	"point"	)
vex_numcount	[ 0	locks=0 ]	(	10	)
vex_threadjobsize	[ 0	locks=0 ]	(	1024	)
snippet	[ 0	locks=0 ]	(	"`chs(\"commoncode\")`

int axis = chi(\"up_axis\");
float gravity = ch(\"gravity\");
float blend_border = ch(\"blendwidth\") * LIMIT;
float suppress_rad = ch(\"suppress_radius\");
int ENABLE_FALLOFF = chi(\"enable_falloff\");
int RELATIVE_FALLOFF = chi(\"relative_falloff\");
vector2 falloff_distances = chu(\"falloff_range\");

if (chi(\"input_type\") == 0)
{
    // Get the 2D axes and projection of the current point on the working plane.
    int p_axis0 = (axis + 1) % 3;
    int p_axis1 = (axis + 2) % 3;
    vector2 pos2 = set(getcomp(v@P, p_axis0), getcomp(v@P, p_axis1));

    // Add the disturbance from every boat.
    int boats = npoints(1);
    float bestdist = 1e30;
    @displacement = 0;
    for (int i = 0; i < boats; i++)
    {
        // Get the boat's location.
        vector prop = point(1, \"P\", i);
        vector2 boat = set(getcomp(prop, p_axis0), getcomp(prop, p_axis1));
        // Get the boat's velocity and calculate its speed.
        prop = point(1, \"v\", i);
        vector2 v_dir = set(getcomp(prop, p_axis0), getcomp(prop, p_axis1));
        float speed = length(v_dir);
        // Normalize the boat's heading direction of the boat.
        v_dir /= speed;
        // Center around the boat and get the point's slope in the plane.
        vector2 reorg = pos2 - boat;
        float X = dot(reorg, v_dir);
        float Z = sign(reorg.x * v_dir.y - reorg.y * v_dir.x)
                * sqrt(length2(reorg) - X*X);
        
        // Evaluate the disturbance.
        float disturbance;
        float maskval;
        getDisturbanceAtPos(X, Z, ENABLE_FALLOFF, RELATIVE_FALLOFF,
                            falloff_distances, gravity, speed, suppress_rad,
                            blend_border, disturbance, maskval);
        @displacement += maskval * disturbance;
        
        if (isCloser(X, Z, bestdist))
        {
            u@coordinates = set(X, Z);
            @mask = maskval;
        }
    }
}
else
{
    // Get the X and Z coordinates with respect to the boat. X is how far behind
    // the boat we are, and Z is the distance from the boat's trajectory.
    float speed = ch(\"speed\");
    u@coordinates.x -= ch(\"time\") * speed;
    float X = u@coordinates.x;
    float Z = u@coordinates.y;
    
    // Evaluate the disturbance.
    float disturbance;
    getDisturbanceAtPos(X, Z, ENABLE_FALLOFF, RELATIVE_FALLOFF,
                        falloff_distances, gravity, speed, suppress_rad,
                        blend_border, disturbance, @mask);
    @displacement = disturbance * @mask;
}

setcomp(v@P, getcomp(v@P, axis) + @displacement, axis);
"	)
exportlist	[ 0	locks=0 ]	(	*	)
vex_strict	[ 0	locks=0 ]	(	"off"	)
autobind	[ 0	locks=0 ]	(	"on"	)
bindings	[ 0	locks=0 ]	(	4	)
groupautobind	[ 0	locks=0 ]	(	"on"	)
groupbindings	[ 0	locks=0 ]	(	0	)
vex_cwdpath	[ 0	locks=0 ]	(	.	)
vex_outputmask	[ 0	locks=0 ]	(	*	)
vex_updatenmls	[ 0	locks=0 ]	(	"off"	)
vex_matchattrib	[ 0	locks=0 ]	(	id	)
vex_inplace	[ 0	locks=0 ]	(	"off"	)
vex_selectiongroup	[ 0	locks=0 ]	(	""	)
vex_precision	[ 0	locks=0 ]	(	auto	)
folder1	[ 0	locks=0 ]	(	0	0	)
commoncode	[ 0	locks=0 ]	(	"// 2^-1.5
#define LIMIT 0.353553390593274

// Helper function that computes the actual angles of interfering waves. Works
// for positive x.
vector2 getAnglesHelper(float x)
{
    // Magic numbers are from least squares fitting of the inverses.
    if (x <= 0.32)
    {
        return set(-1.570796326794897 + x * (1.924829887806745
                                      + x * (1.799225126749479
                                      + x * (-11.350265335118886
                                      + x * 28.945203484319379))),
                   x * (-0.924954184529148 + x * (-1.795598797107657
                                           + x * (10.982366216278642
                                           + x * -28.809142610856266))));
    }
    else if (x <= LIMIT)
    {
        float s = sqrt(LIMIT - x);
        return set(-0.530813046409100 + x * (-2.476553573077429
                                      + x * (10.596440126044998
                                      + x * -12.074799053467531))
                                      + s * -1.119805997520857,
                   -1.042254065835762 + x * (3.502758101229738
                                      + x * (-10.705086515839202
                                      + x * 11.913474736542710))
                                      + s * 1.119805705537293);
    }
    else
    {
        return set(-0.615479708670387, -0.615479708670387);
    }
}
// Returns angles of the two waves interfering at points with the given slope
// with respect to the boat.
vector2 getAngles(float slope)
{
    if (slope < 0)
        return -getAnglesHelper(-slope);
    else
        return getAnglesHelper(slope);
}

// Evaluate the phase function and its second derivative.
float getRG(float x, z, theta, GU2; float deriv2)
{
    float s = sin(theta);
    float c = cos(theta);
    float zt = z * (s / c);
    
    deriv2 = GU2 * (x + 5 * zt + s * s * (x + zt)) / (c * c * c);
    return GU2 * (x + zt) / c;
}
// Evaluate the wave function at the given point given the wave angle.
vector2 evalDisturbance(float x, z, GU2, theta)
{
    float dRG2;
    float RG = getRG(x, z, theta, GU2, dRG2);
    float MULT = sqrt(M_PI * 2 / abs(dRG2));
    float angle = RG + (dRG2 > 0 ? M_PI / 4 : -M_PI / 4);
    return MULT * set(cos(angle), sin(angle));
}

// Reads the complex multiplier for the wave at the given angle with respect to
// the boat. This comes from the two user-defined ramps.
vector2 getCoefficient(float theta)
{
    float x = fit(theta, -M_PI / 2, M_PI / 2, 0, 1);
    float mag = chramp(\"magnitude_ramp\", x) * ch(\"magnitude_multiplier\");
    float angle = chramp(\"phase_ramp\", x) * M_PI * 2 + ch(\"phase_offset\");
    return mag * set(cos(angle), sin(angle));
}

// Returns real part of the complex product of the two numbers.
float complexMultRe(vector2 a, b)
{
    return a.x*b.x - a.y*b.y;
}

// Smooth blending function.
float smoothstep5(float x)
{
    return x * x * x * (10 + x * (6 * x - 15));
}

// Evaluates the disturbance and mask values.
void getDisturbanceAtPos(float X, Z; int enable_falloff, relative_falloff;
                         vector2 falloff_distances; float gravity, speed;
                         float suppress_rad, blend_border;
                         float disturbance, mask)
{
    mask = 0;
    disturbance = 0;

    // Adjust the falloffs if necessary. We can also exit early if we are in a
    // masked-out zone.
    float reorg_l = sqrt(X*X + Z*Z);
    vector2 effective_falloffs = falloff_distances;
    if (enable_falloff)
    {
        if (relative_falloff)
            effective_falloffs *= speed;
        if (reorg_l > effective_falloffs.y)
            return;
    }

    float slope = Z / X;
    if (X < 0 && abs(slope) < LIMIT)
    {
        // Multiplication factor for wave displacement computation.
        float GU2 = gravity / (speed * speed);
        // Get angles of the two interfering waves.
        vector2 thetas = getAngles(slope);
        // Evaluate the complex disturbance functions.
        vector2 d1 = evalDisturbance(X, Z, GU2, thetas.x);
        vector2 d2 = evalDisturbance(X, Z, GU2, thetas.y);
        // Get the linear combination using coefficients deduced from ramps.
        disturbance = complexMultRe(d1, getCoefficient(thetas.x))
                    + complexMultRe(d2, getCoefficient(thetas.y));
        // Attenuate the disturbance by distance to the boat (since the
        // calculations here are only accurate for points far from the boat).
        mask = smoothstep5(1 - max(suppress_rad - reorg_l, 0) / suppress_rad);

        // If we are near the wake edge, apply some attenuation to remove
        // discontinuities.
        if (abs(slope) > blend_border)
        {
            float bamount = (abs(slope) - blend_border)
                          / (LIMIT - blend_border);
            mask *= 1 - smoothstep5(bamount);
        }
        
        // If enabled, attenuate by distance.
        if (enable_falloff)
            mask *= fit(reorg_l, effective_falloffs.x, effective_falloffs.y,
                        1, 0);
    }
}

// Updates bestdist given the coordinates with respect to the current boat. If
// the coordinates are inside the wake of any boat, we want bestdist to be the
// negative distance to the closest such boat. Otherwise, bestdist should simply
// be the distance to the closest boat.
int isCloser(float X, Z, bestdist)
{
    // Are we in the wake of the current boat?
    if (X < 0 && abs(Z / X) < LIMIT)
    {
        float dist = -X*X-Z*Z;
        // If this is the first boat we're in the wake of, we found a new
        // bestdist.
        if (bestdist > 0)
        {
            bestdist = dist;
            return 1;
        }
        // This isn't the first boat we're in the wake of. Determine if we are
        // closer to this boat than the one recorded in bestdist.
        else
        {
            int result = (dist > bestdist);
            bestdist = max(dist, bestdist);
            return result;
        }
    }
    // We are not in the wake of this boat, but we are in the wake of another
    // one.
    else if (bestdist <= 0)
    {
        return 0;
    }
    // We are outside the wake area of all boats encountered so far.
    else
    {
        float dist = X*X+Z*Z;
        int result = (dist < bestdist);
        bestdist = min(dist, bestdist);
        return result;
    }
}"	)
magnitude_multiplier	[ 0	locks=0 ]	(	[ magnitude_multiplier	0 ] 	)
phase_offset	[ 0	locks=0 ]	(	[ phase_offset	0 ] 	)
gravity	[ 0	locks=0 ]	(	[ gravity	0 ] 	)
blendwidth	[ 0	locks=0 ]	(	[ blendwidth	0 ] 	)
suppress_radius	[ 0	locks=0 ]	(	[ suppress_radius	0 ] 	)
speed	[ 0	locks=0 ]	(	[ speed	0 ] 	)
time	[ 0	locks=0 ]	(	[ time	0 ] 	)
up_axis	[ 0	locks=0 ]	(	[ up_axis	0 ] 	)
enable_falloff	[ 0	locks=0 ]	(	[ enable_falloff	0 ] 	)
relative_falloff	[ 0	locks=0 ]	(	[ relative_falloff	0 ] 	)
input_type	[ 0	locks=0 ]	(	[ input_type	0 ] 	)
falloff_range	[ 0	locks=0 ]	(	[ falloff_rangex	0 ] 	[ falloff_rangey	0 ] 	)
magnitude_ramp	[ 8	locks=0 ]	(	[ magnitude_ramp	5 ] 	)
magnitude_ramp1pos	[ 0	locks=0 ]	(	[ magnitude_ramp1pos	0 ] 	)
magnitude_ramp1value	[ 0	locks=0 ]	(	[ magnitude_ramp1value	0 ] 	)
magnitude_ramp1interp	[ 0	locks=0 ]	(	[ magnitude_ramp1interp	1 ] 	)
phase_ramp	[ 8	locks=0 ]	(	[ phase_ramp	1 ] 	)
phase_ramp1pos	[ 0	locks=0 ]	(	[ phase_ramp1pos	0 ] 	)
phase_ramp1value	[ 0	locks=0 ]	(	[ phase_ramp1value	0 ] 	)
phase_ramp1interp	[ 0	locks=0 ]	(	[ phase_ramp1interp	1 ] 	)
magnitude_ramp2pos	[ 0	locks=0 ]	(	[ magnitude_ramp2pos	0 ] 	)
magnitude_ramp2value	[ 0	locks=0 ]	(	[ magnitude_ramp2value	0 ] 	)
magnitude_ramp2interp	[ 0	locks=0 ]	(	[ magnitude_ramp2interp	1 ] 	)
bindname1	[ 0	locks=0 ]	(	"`ifs(ch(\"../outputcoord\"), chs(\"../outputcoordattrib\"), \"__COORD\")`"	)
bindparm1	[ 0	locks=0 ]	(	coordinates	)
bindname2	[ 0	locks=0 ]	(	"`ifs(ch(\"../outputdisp\"), chs(\"../outputdispattrib\"), \"\")`"	)
bindparm2	[ 0	locks=0 ]	(	displacement	)
bindname3	[ 0	locks=0 ]	(	"`ifs(ch(\"../outputmask\"), chs(\"../outputmaskattrib\"), \"\")`"	)
bindparm3	[ 0	locks=0 ]	(	mask	)
bindname4	[ 0	locks=0 ]	(	P	)
bindparm4	[ 0	locks=0 ]	(	P	)
magnitude_ramp3pos	[ 0	locks=0 ]	(	[ magnitude_ramp3pos	0 ] 	)
magnitude_ramp3value	[ 0	locks=0 ]	(	[ magnitude_ramp3value	0 ] 	)
magnitude_ramp3interp	[ 0	locks=0 ]	(	[ magnitude_ramp3interp	1 ] 	)
magnitude_ramp4pos	[ 0	locks=0 ]	(	[ magnitude_ramp4pos	0 ] 	)
magnitude_ramp4value	[ 0	locks=0 ]	(	[ magnitude_ramp4value	0 ] 	)
magnitude_ramp4interp	[ 0	locks=0 ]	(	[ magnitude_ramp4interp	1 ] 	)
magnitude_ramp5pos	[ 0	locks=0 ]	(	[ magnitude_ramp5pos	0 ] 	)
magnitude_ramp5value	[ 0	locks=0 ]	(	[ magnitude_ramp5value	0 ] 	)
magnitude_ramp5interp	[ 0	locks=0 ]	(	[ magnitude_ramp5interp	1 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_deform.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_target.init"
Content-Type: text/plain

type = switch
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_target.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 11.162 -5.26129
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	delete__COORD_attrib 1 1 "input1"
2 	delete__COORD_layer 1 1 "input2"
}
inputs
{
0 	delete__COORD_attrib 0 1
1 	delete__COORD_layer 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 1 0.7 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_target.chn"
Content-Type: text/plain

{
    channel input {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../target\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_target.parm"
Content-Type: text/plain

{
version 0.8
input	[ 0	locks=0 ]	(	[ input	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_target.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.init"
Content-Type: text/plain

type = volumewrangle
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 13.6388 -3.15289
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	switch_heightfield_coord 2 1 "input1"
2 	switch_input 2 1 "input2"
}
inputs
{
0 	switch_heightfield_coord 0 1
1 	switch_input 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.multiparm"
Content-Type: text/plain

6
magnitude_ramp#pos ../magnitude_ramp#pos
magnitude_ramp#value ../magnitude_ramp#value
magnitude_ramp#interp ../magnitude_ramp#interp
phase_ramp#pos ../phase_ramp#pos
phase_ramp#value ../phase_ramp#value
phase_ramp#interp ../phase_ramp#interp

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.spareparmdef"
Content-Type: text/plain

    group {
        name    "folder1"
        label   "Code"

        parm {
            name    "group"
            baseparm
            label   "Group"
            export  none
        }
        parm {
            name    "bindeach"
            baseparm
            label   "Bind Each Volume to Density"
            export  none
        }
        parm {
            name    "snippet"
            baseparm
            label   "VEXpression"
            export  all
        }
        parm {
            name    "exportlist"
            baseparm
            label   "Volumes to Write to"
            export  none
        }
        parm {
            name    "vex_strict"
            baseparm
            label   "Enforce Prototypes"
            export  none
        }
    }

    group {
        name    "folder1_1"
        label   "Bindings"

        parm {
            name    "autobind"
            baseparm
            label   "Autobind by Name"
            export  none
        }
        multiparm {
            name    "bindings"
            label    "Number of Bindings"
            baseparm
            default 0
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "multistartoffset" "1" }

            parm {
                name    "bindprimname#"
                baseparm
                label   "Primitive Name"
                export  none
            }
            parm {
                name    "bindprim#"
                baseparm
                label   "Primitive"
                export  none
            }
            parm {
                name    "bindname#"
                baseparm
                label   "VEX Parameter"
                export  none
            }
        }

        parm {
            name    "vex_geometrygenerator"
            baseparm
            label   "Only Output Created Geometry"
            export  none
        }
        parm {
            name    "vdb_signedflood"
            baseparm
            label   "Signed-Flood Fill Output SDF VDBs"
            export  none
        }
        parm {
            name    "vex_cwdpath"
            baseparm
            label   "Evaluation Node Path"
            export  none
        }
        parm {
            name    "vex_outputmask"
            baseparm
            label   "Export Parameters"
            export  none
        }
        parm {
            name    "vex_precision"
            baseparm
            label   "VEX Precision"
            export  none
        }
    }

    parm {
        name    "gravity"
        label   "Gravity"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "blendwidth"
        label   "Blendwidth"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "suppress_radius"
        label   "Suppress Radius"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "speed"
        label   "Speed"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "time"
        label   "Time"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "up_axis"
        label   "Up Axis"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "enable_falloff"
        label   "Enable Falloff"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "relative_falloff"
        label   "Relative Falloff"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "input_type"
        label   "Input Type"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "falloff_range"
        label   "Falloff Range"
        type    vector2
        size    2
        default { "0" "0" }
        range   { 0 1 }
    }
    parm {
        name    "magnitude_multiplier"
        label   "Magnitude Multiplier"
        type    float
        default { "0" }
        range   { 0 10 }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "magnitude_ramp"
        label   "Magnitude Ramp"
        type    ramp_flt
        default { "2" }
        range   { 1! 10 }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "phase_offset"
        label   "Phase Offset"
        type    float
        default { "0" }
        range   { 0 10 }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "phase_ramp"
        label   "Phase Ramp"
        type    ramp_flt
        default { "2" }
        range   { 1! 10 }
        parmtag { "script_callback_language" "python" }
    }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.chn"
Content-Type: text/plain

{
    channel magnitude_ramp1pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp1pos\") }
    }
    channel magnitude_ramp1value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp1value\") }
    }
    channel magnitude_ramp1interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp1interp\") }
    }
    channel phase_ramp1pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../phase_ramp1pos\") }
    }
    channel phase_ramp1value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../phase_ramp1value\") }
    }
    channel phase_ramp1interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../phase_ramp1interp\") }
    }
    channel magnitude_ramp2pos {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp2pos\") }
    }
    channel magnitude_ramp2value {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp2value\") }
    }
    channel magnitude_ramp2interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp2interp\") }
    }
    channel gravity {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../gravity\") }
    }
    channel blendwidth {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "1 - ch(\"../edgeblend\")" }
    }
    channel suppress_radius {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../suppress_radius\") }
    }
    channel speed {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../speed\") }
    }
    channel time {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "{
if (ch(\"input_type\") == 0)
    return 0;
else
    return $T - (ch(\"../curvestart\") - 1) / $FPS;
}" }
    }
    channel up_axis {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../normal\") }
    }
    channel enable_falloff {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enable_falloff\") }
    }
    channel relative_falloff {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../relative_falloff\") }
    }
    channel input_type {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../input\") }
    }
    channel falloff_rangex {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../falloff_rangex\") }
    }
    channel falloff_rangey {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../falloff_rangey\") }
    }
    channel magnitude_multiplier {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_multiplier\") }
    }
    channel phase_offset {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../phase_offset\") }
    }
    channel magnitude_ramp {
      lefttype = extend
      righttype = extend
      default = 2
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../magnitude_ramp\") }
    }
    channel magnitude_ramp3pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp3pos\") }
    }
    channel magnitude_ramp3value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp3value\") }
    }
    channel magnitude_ramp3interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp3interp\") }
    }
    channel phase_ramp {
      lefttype = extend
      righttype = extend
      default = 2
      flags = 0
      segment { length = 0 value = 3 3 expr = ch(\"../phase_ramp\") }
    }
    channel magnitude_ramp4pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp4pos\") }
    }
    channel magnitude_ramp4value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp4value\") }
    }
    channel magnitude_ramp4interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp4interp\") }
    }
    channel magnitude_ramp5pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp5pos\") }
    }
    channel magnitude_ramp5value {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../magnitude_ramp5value\") }
    }
    channel magnitude_ramp5interp {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../magnitude_ramp5interp\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	0	)
group	[ 0	locks=0 ]	(	""	)
bindeach	[ 0	locks=0 ]	(	"off"	)
snippet	[ 0	locks=0 ]	(	"`chs(\"../point_deform/commoncode\")`

int axis = chi(\"up_axis\");
float gravity = ch(\"gravity\");
float blend_border = ch(\"blendwidth\") * LIMIT;
float suppress_rad = ch(\"suppress_radius\");
int ENABLE_FALLOFF = chi(\"enable_falloff\");
int RELATIVE_FALLOFF = chi(\"relative_falloff\");
vector2 falloff_distances = chu(\"falloff_range\");

float displacement = 0;
if (chi(\"input_type\") == 0)
{
    // Get the 2D axes and projection of the current point on the working plane.
    int p_axis0 = (axis + 1) % 3;
    int p_axis1 = (axis + 2) % 3;
    vector2 pos2 = set(getcomp(v@P, p_axis0), getcomp(v@P, p_axis1));

    // Add the disturbance from every boat.
    int boats = npoints(1);
    float bestdist = 1e30;
    for (int i = 0; i < boats; i++)
    {
        // Get the boat's location.
        vector prop = point(1, \"P\", i);
        vector2 boat = set(getcomp(prop, p_axis0), getcomp(prop, p_axis1));
        // Get the boat's velocity and calculate its speed.
        prop = point(1, \"v\", i);
        vector2 v_dir = set(getcomp(prop, p_axis0), getcomp(prop, p_axis1));
        float speed = length(v_dir);
        // Normalize the boat's heading direction of the boat.
        v_dir /= speed;
        // Center around the boat and get the point's slope in the plane.
        vector2 reorg = pos2 - boat;
        float X = dot(reorg, v_dir);
        float Z = sign(reorg.x * v_dir.y - reorg.y * v_dir.x)
                * sqrt(length2(reorg) - X*X);
        
        // Evaluate the disturbance.
        float disturbance;
        float maskval;
        getDisturbanceAtPos(X, Z, ENABLE_FALLOFF, RELATIVE_FALLOFF,
                            falloff_distances, gravity, speed, suppress_rad,
                            blend_border, disturbance, maskval);
        displacement += maskval * disturbance;
    }
}
else
{
    // Get the X and Z coordinates with respect to the boat. X is how far behind
    // the boat we are, and Z is the distance from the boat's trajectory.
    float speed = ch(\"speed\");
    float X = @coordX - ch(\"time\") * speed;
    float Z = @coordZ;
    
    // Evaluate the disturbance.
    float disturbance;
    getDisturbanceAtPos(X, Z, ENABLE_FALLOFF, RELATIVE_FALLOFF,
                        falloff_distances, gravity, speed, suppress_rad,
                        blend_border, disturbance, @mask);
    displacement = disturbance * @mask;
}

@height += displacement;
"	)
exportlist	[ 0	locks=0 ]	(	*	)
vex_strict	[ 0	locks=0 ]	(	"off"	)
autobind	[ 0	locks=0 ]	(	"off"	)
bindings	[ 0	locks=0 ]	(	3	)
vex_geometrygenerator	[ 0	locks=0 ]	(	"off"	)
vdb_signedflood	[ 0	locks=0 ]	(	"on"	)
vex_cwdpath	[ 0	locks=0 ]	(	.	)
vex_outputmask	[ 0	locks=0 ]	(	*	)
vex_precision	[ 0	locks=0 ]	(	auto	)
folder1	[ 0	locks=0 ]	(	0	0	)
gravity	[ 0	locks=0 ]	(	[ gravity	0 ] 	)
blendwidth	[ 0	locks=0 ]	(	[ blendwidth	0 ] 	)
suppress_radius	[ 0	locks=0 ]	(	[ suppress_radius	0 ] 	)
speed	[ 0	locks=0 ]	(	[ speed	0 ] 	)
time	[ 0	locks=0 ]	(	[ time	0 ] 	)
up_axis	[ 0	locks=0 ]	(	[ up_axis	0 ] 	)
enable_falloff	[ 0	locks=0 ]	(	[ enable_falloff	0 ] 	)
relative_falloff	[ 0	locks=0 ]	(	[ relative_falloff	0 ] 	)
input_type	[ 0	locks=0 ]	(	[ input_type	0 ] 	)
falloff_range	[ 0	locks=0 ]	(	[ falloff_rangex	0 ] 	[ falloff_rangey	0 ] 	)
magnitude_multiplier	[ 0	locks=0 ]	(	[ magnitude_multiplier	0 ] 	)
magnitude_ramp	[ 8	locks=0 ]	(	[ magnitude_ramp	5 ] 	)
magnitude_ramp1pos	[ 0	locks=0 ]	(	[ magnitude_ramp1pos	0 ] 	)
magnitude_ramp1value	[ 0	locks=0 ]	(	[ magnitude_ramp1value	0 ] 	)
magnitude_ramp1interp	[ 0	locks=0 ]	(	[ magnitude_ramp1interp	1 ] 	)
phase_offset	[ 0	locks=0 ]	(	[ phase_offset	0 ] 	)
phase_ramp	[ 8	locks=0 ]	(	[ phase_ramp	1 ] 	)
phase_ramp1pos	[ 0	locks=0 ]	(	[ phase_ramp1pos	0 ] 	)
phase_ramp1value	[ 0	locks=0 ]	(	[ phase_ramp1value	0 ] 	)
phase_ramp1interp	[ 0	locks=0 ]	(	[ phase_ramp1interp	1 ] 	)
magnitude_ramp2pos	[ 0	locks=0 ]	(	[ magnitude_ramp2pos	0 ] 	)
magnitude_ramp2value	[ 0	locks=0 ]	(	[ magnitude_ramp2value	0 ] 	)
magnitude_ramp2interp	[ 0	locks=0 ]	(	[ magnitude_ramp2interp	1 ] 	)
bindprimname1	[ 0	locks=0 ]	(	`chs(\"../heightlayer\")	)
bindprim1	[ 0	locks=0 ]	(	0	)
bindname1	[ 0	locks=0 ]	(	height	)
bindprimname2	[ 0	locks=0 ]	(	__COORD_X	)
bindprim2	[ 0	locks=0 ]	(	0	)
bindname2	[ 0	locks=0 ]	(	coordX	)
bindprimname3	[ 0	locks=0 ]	(	__COORD_Z	)
bindprim3	[ 0	locks=0 ]	(	0	)
bindname3	[ 0	locks=0 ]	(	coordZ	)
magnitude_ramp3pos	[ 0	locks=0 ]	(	[ magnitude_ramp3pos	0 ] 	)
magnitude_ramp3value	[ 0	locks=0 ]	(	[ magnitude_ramp3value	0 ] 	)
magnitude_ramp3interp	[ 0	locks=0 ]	(	[ magnitude_ramp3interp	1 ] 	)
magnitude_ramp4pos	[ 0	locks=0 ]	(	[ magnitude_ramp4pos	0 ] 	)
magnitude_ramp4value	[ 0	locks=0 ]	(	[ magnitude_ramp4value	0 ] 	)
magnitude_ramp4interp	[ 0	locks=0 ]	(	[ magnitude_ramp4interp	1 ] 	)
magnitude_ramp5pos	[ 0	locks=0 ]	(	[ magnitude_ramp5pos	0 ] 	)
magnitude_ramp5value	[ 0	locks=0 ]	(	[ magnitude_ramp5value	0 ] 	)
magnitude_ramp5interp	[ 0	locks=0 ]	(	[ magnitude_ramp5interp	1 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_deform.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample_the_sequel.init"
Content-Type: text/plain

type = resample
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample_the_sequel.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 8.55559 3.24761
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	resample 1 1 "input1"
}
inputs
{
0 	resample 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample_the_sequel.chn"
Content-Type: text/plain

{
    channel length {
      lefttype = extend
      righttype = extend
      default = 0.10000000000000001
      flags = 0
      segment { length = 0 value = 0.10000000000000001 0.10000000000000001 expr = ch(\"../resample/length\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample_the_sequel.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
maintainprimorder	[ 0	locks=0 ]	(	"off"	)
lod	[ 0	locks=0 ]	(	1	)
edge	[ 0	locks=0 ]	(	"off"	)
method	[ 0	locks=0 ]	(	"dist"	)
measure	[ 0	locks=0 ]	(	"arc"	)
dolength	[ 0	locks=0 ]	(	"on"	)
length	[ 0	locks=0 ]	(	[ length	0.10000000000000001 ] 	)
dosegs	[ 0	locks=0 ]	(	"off"	)
segs	[ 0	locks=0 ]	(	10	)
useattribs	[ 0	locks=0 ]	(	"on"	)
allequal	[ 0	locks=0 ]	(	"on"	)
last	[ 0	locks=0 ]	(	"off"	)
randomshift	[ 0	locks=0 ]	(	"off"	)
onlypoints	[ 0	locks=0 ]	(	"off"	)
treatpolysas	[ 0	locks=0 ]	(	"straight"	)
outputsubdpoly	[ 0	locks=0 ]	(	"off"	)
doptdistattr	[ 0	locks=0 ]	(	"off"	)
ptdistattr	[ 0	locks=0 ]	(	ptdist	)
dotangentattr	[ 0	locks=0 ]	(	"on"	)
tangentattr	[ 0	locks=0 ]	(	tangentu	)
docurveuattr	[ 0	locks=0 ]	(	"on"	)
curveuattr	[ 0	locks=0 ]	(	curveu	)
docurvenumattr	[ 0	locks=0 ]	(	"off"	)
curvenumattr	[ 0	locks=0 ]	(	curvenum	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resample_the_sequel.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_coord.init"
Content-Type: text/plain

type = attribwrangle
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_coord.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 7.75559 -0.291488
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	(0) "" 1 "input1"
2 	switch_input 2 1 "input2"
}
inputs
{
0 	(0) 0 1
1 	switch_input 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_coord.spareparmdef"
Content-Type: text/plain

    group {
        name    "folder1"
        label   "Code"

        parm {
            name    "group"
            baseparm
            label   "Group"
            export  none
            bindselector points "Modify Points"
                "Select the points to affect and press Enter to complete."
                0 1 0xffffffff 0 grouptype 0
        }
        parm {
            name    "grouptype"
            baseparm
            label   "Group Type"
            export  none
        }
        parm {
            name    "class"
            baseparm
            label   "Run Over"
            export  none
        }
        parm {
            name    "vex_numcount"
            baseparm
            label   "Number Count"
            export  none
        }
        parm {
            name    "vex_threadjobsize"
            baseparm
            label   "Thread Job Size"
            export  none
        }
        parm {
            name    "commoncode"
            label   "Common Code"
            type    string
            default { "" }
            parmtag { "editor" "1" }
            parmtag { "editorlang" "vex" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "snippet"
            baseparm
            label   "VEXpression"
            export  all
        }
        parm {
            name    "exportlist"
            baseparm
            label   "Attributes to Create"
            export  none
        }
        parm {
            name    "vex_strict"
            baseparm
            label   "Enforce Prototypes"
            export  none
        }
    }

    group {
        name    "folder1_1"
        label   "Bindings"

        parm {
            name    "autobind"
            baseparm
            label   "Autobind by Name"
            export  none
        }
        multiparm {
            name    "bindings"
            label    "Number of Bindings"
            baseparm
            default 0
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "multistartoffset" "1" }

            parm {
                name    "bindname#"
                baseparm
                label   "Attribute Name"
                export  none
            }
            parm {
                name    "bindparm#"
                baseparm
                label   "VEX Parameter"
                export  none
            }
        }

        parm {
            name    "groupautobind"
            baseparm
            label   "Autobind Groups by Name"
            export  none
        }
        multiparm {
            name    "groupbindings"
            label    "Group Bindings"
            baseparm
            default 0
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "multistartoffset" "1" }

            parm {
                name    "bindgroupname#"
                baseparm
                label   "Group Name"
                export  none
            }
            parm {
                name    "bindgroupparm#"
                baseparm
                label   "VEX Parameter"
                export  none
            }
        }

        parm {
            name    "vex_cwdpath"
            baseparm
            label   "Evaluation Node Path"
            export  none
        }
        parm {
            name    "vex_outputmask"
            baseparm
            label   "Export Parameters"
            export  none
        }
        parm {
            name    "vex_updatenmls"
            baseparm
            label   "Update Normals If Displaced"
            export  none
        }
        parm {
            name    "vex_matchattrib"
            baseparm
            label   "Attribute to Match"
            export  none
        }
        parm {
            name    "vex_inplace"
            baseparm
            label   "Compute Results In Place"
            export  none
        }
        parm {
            name    "vex_selectiongroup"
            baseparm
            label   "Output Selection Group"
            export  none
        }
        parm {
            name    "vex_precision"
            baseparm
            label   "VEX Precision"
            export  none
        }
    }

    parm {
        name    "supersample_distance"
        label   "Supersample Distance"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "supersample"
        label   "Supersample"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "up_axis"
        label   "Up Axis"
        type    integer
        default { "0" }
        range   { 0 10 }
    }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_coord.chn"
Content-Type: text/plain

{
    channel up_axis {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../normal\") }
    }
    channel supersample_distance {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../supersample_dx\") }
    }
    channel supersample {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enable_supersample\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_coord.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	0	)
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
class	[ 0	locks=0 ]	(	"point"	)
vex_numcount	[ 0	locks=0 ]	(	10	)
vex_threadjobsize	[ 0	locks=0 ]	(	1024	)
snippet	[ 0	locks=0 ]	(	"`chs(\"commoncode\")`

u@coordinates = set(X, Z);
"	)
exportlist	[ 0	locks=0 ]	(	*	)
vex_strict	[ 0	locks=0 ]	(	"off"	)
autobind	[ 0	locks=0 ]	(	"off"	)
bindings	[ 0	locks=0 ]	(	2	)
groupautobind	[ 0	locks=0 ]	(	"on"	)
groupbindings	[ 0	locks=0 ]	(	0	)
vex_cwdpath	[ 0	locks=0 ]	(	.	)
vex_outputmask	[ 0	locks=0 ]	(	*	)
vex_updatenmls	[ 0	locks=0 ]	(	"off"	)
vex_matchattrib	[ 0	locks=0 ]	(	id	)
vex_inplace	[ 0	locks=0 ]	(	"off"	)
vex_selectiongroup	[ 0	locks=0 ]	(	""	)
vex_precision	[ 0	locks=0 ]	(	auto	)
folder1	[ 0	locks=0 ]	(	0	0	)
commoncode	[ 0	locks=0 ]	(	"#define EPS 1e-5
// Finds the closest point on the boat's path to the given position. Outputs are
// in closest_pt, closest_tan and curveu.
void findClosestPoint(int p_axis0, p_axis1; float curve_length; vector pos3;
                      vector2 closest_pt, closest_tan; float curveu)
{
    vector2 pos2 = set(getcomp(pos3, p_axis0), getcomp(pos3, p_axis1));
    
    int prim;
    vector uv;
    xyzdist(1, pos3, prim, uv);
    // Get the location of the closest point on the curve, as well as the
    // tangent there.
    vector prop = primuv(1, \"P\", prim, uv);
    closest_pt = set(getcomp(prop, p_axis0), getcomp(prop, p_axis1));
    prop = primuv(1, \"tangentu\", prim, uv);
    closest_tan = normalize(set(getcomp(prop, p_axis0),
                                getcomp(prop, p_axis1)));
    curveu = primuv(1, \"curveu\", prim, uv);
    // If we are beyond the curve proper, linearly extrapolate the curve to get
    // the actual closest point.
    if (uv.x <= EPS)
    {
        float corr = min(0, dot(pos2 - closest_pt, closest_tan));
        curveu += corr / curve_length;
        closest_pt = closest_pt + corr * closest_tan;
    }
    else if (uv.x >= 1 - EPS)
    {
        float corr = max(0, dot(pos2 - closest_pt, closest_tan));
        curveu += corr / curve_length;
        closest_pt = closest_pt + corr * closest_tan;
    }
}

// Get the 2D axes and projection of the current point on the working plane.
int axis = chi(\"up_axis\");
int p_axis0 = (axis + 1) % 3;
int p_axis1 = (axis + 2) % 3;
vector2 pos2 = set(getcomp(v@P, p_axis0), getcomp(v@P, p_axis1));
float curve_length = prim(1, \"length\", 0);

// Now find the closest point on the curve that represents the boat's
// extended trajectories.
vector2 closest_pt;
vector2 closest_tan;
float curveu;
// If we are supersampling, average the values from 5 samples: 1 at the
// center, plus four in the plus shape along cardinal axes.
if (chi(\"supersample\"))
{
    float ss_dist = ch(\"supersample_distance\");
    vector2 closest_pt_local;
    vector2 closest_tan_local;
    float curveu_local;
    
    vector dx = 0;
    vector dy = 0;
    setcomp(dx, ss_dist, p_axis0);
    setcomp(dy, ss_dist, p_axis1);

    findClosestPoint(p_axis0, p_axis1, curve_length, v@P,
                     closest_pt_local, closest_tan_local, curveu_local);
    closest_pt = closest_pt_local;
    closest_tan = closest_tan_local;
    curveu = curveu_local;
    findClosestPoint(p_axis0, p_axis1, curve_length, v@P + dx,
                     closest_pt_local, closest_tan_local, curveu_local);
    closest_pt += closest_pt_local;
    closest_tan += closest_tan_local;
    curveu += curveu_local;
    findClosestPoint(p_axis0, p_axis1, curve_length, v@P - dx,
                     closest_pt_local, closest_tan_local, curveu_local);
    closest_pt += closest_pt_local;
    closest_tan += closest_tan_local;
    curveu += curveu_local;
    findClosestPoint(p_axis0, p_axis1, curve_length, v@P + dy,
                     closest_pt_local, closest_tan_local, curveu_local);
    closest_pt += closest_pt_local;
    closest_tan += closest_tan_local;
    curveu += curveu_local;
    findClosestPoint(p_axis0, p_axis1, curve_length, v@P - dy,
                     closest_pt_local, closest_tan_local, curveu_local);
    closest_pt += closest_pt_local;
    closest_tan += closest_tan_local;
    curveu += curveu_local;

    closest_pt /= 5;
    closest_tan = normalize(closest_tan);
    curveu /= 5;
}
else
{
    findClosestPoint(p_axis0, p_axis1, curve_length, v@P, closest_pt,
                     closest_tan, curveu);
}

// Get the X and Z coordinates with respect to the boat. X is how far behind
// the boat we are, and Z is the distance from the boat's trajectory.
vector2 reorg = pos2 - closest_pt;
float Z = sign(reorg.x * closest_tan.y - reorg.y * closest_tan.x)
        * length(reorg);
float X = curveu * curve_length;
"	)
supersample_distance	[ 0	locks=0 ]	(	[ supersample_distance	0 ] 	)
supersample	[ 0	locks=0 ]	(	[ supersample	0 ] 	)
up_axis	[ 0	locks=0 ]	(	[ up_axis	0 ] 	)
bindname1	[ 0	locks=0 ]	(	P	)
bindparm1	[ 0	locks=0 ]	(	P	)
bindname2	[ 0	locks=0 ]	(	"`ifs(ch(\"../outputcoord\"), chs(\"../outputcoordattrib\"), \"__COORD\")`"	)
bindparm2	[ 0	locks=0 ]	(	coordinates	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/point_coord.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_point_coord.init"
Content-Type: text/plain

type = switch
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_point_coord.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 6.55559 -1.27039
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
2 "output1"
}
inputsNamed3
{
0 	(0) "" 1 "input1"
1 	point_coord 0 1 "input2"
}
inputs
{
0 	(0) 0 1
1 	point_coord 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 1 0.7 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_point_coord.chn"
Content-Type: text/plain

{
    channel input {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../input\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_point_coord.parm"
Content-Type: text/plain

{
version 0.8
input	[ 0	locks=0 ]	(	[ input	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_point_coord.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_attrib.init"
Content-Type: text/plain

type = attribdelete
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_attrib.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 8.68519 -3.83059
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	point_deform 2 1 "input1"
}
inputs
{
0 	point_deform 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_attrib.parm"
Content-Type: text/plain

{
version 0.8
usereference	[ 0	locks=0 ]	(	"off"	)
negate	[ 0	locks=0 ]	(	"off"	)
doptdel	[ 0	locks=0 ]	(	"on"	)
ptdel	[ 0	locks=0 ]	(	__COORD	)
dovtxdel	[ 0	locks=0 ]	(	"off"	)
vtxdel	[ 0	locks=0 ]	(	""	)
doprimdel	[ 0	locks=0 ]	(	"off"	)
primdel	[ 0	locks=0 ]	(	""	)
dodtldel	[ 0	locks=0 ]	(	"off"	)
dtldel	[ 0	locks=0 ]	(	""	)
updatevar	[ 0	locks=0 ]	(	"on"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_attrib.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/create__COORD.init"
Content-Type: text/plain

type = heightfield_copylayer
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/create__COORD.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 13.6388 1.13921
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	(0) "" 1 "input1"
}
inputs
{
0 	(0) 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/create__COORD.parm"
Content-Type: text/plain

{
version 0.8
numcopy	[ 0	locks=0 ]	(	2	)
srcname1	[ 0	locks=0 ]	(	`chs(\"../heightlayer\")`	)
dstname1	[ 0	locks=0 ]	(	__COORD_X	)
copysrc1	[ 0	locks=0 ]	(	"off"	)
replacedst1	[ 0	locks=0 ]	(	"on"	)
srcname2	[ 0	locks=0 ]	(	`chs(\"../heightlayer\")`	)
dstname2	[ 0	locks=0 ]	(	__COORD_Z	)
copysrc2	[ 0	locks=0 ]	(	"off"	)
replacedst2	[ 0	locks=0 ]	(	"on"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/create__COORD.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_coord.init"
Content-Type: text/plain

type = volumewrangle
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_coord.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 13.6388 -0.291488
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
2 "output1"
}
inputsNamed3
{
0 	create__COORD 1 1 "input1"
1 	switch_input 2 1 "input2"
}
inputs
{
0 	create__COORD 0 1
1 	switch_input 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_coord.spareparmdef"
Content-Type: text/plain

    group {
        name    "folder1"
        label   "Code"

        parm {
            name    "group"
            baseparm
            label   "Group"
            export  none
        }
        parm {
            name    "bindeach"
            baseparm
            label   "Bind Each Volume to Density"
            export  none
        }
        parm {
            name    "snippet"
            baseparm
            label   "VEXpression"
            export  all
        }
        parm {
            name    "exportlist"
            baseparm
            label   "Volumes to Write to"
            export  none
        }
        parm {
            name    "vex_strict"
            baseparm
            label   "Enforce Prototypes"
            export  none
        }
    }

    group {
        name    "folder1_1"
        label   "Bindings"

        parm {
            name    "autobind"
            baseparm
            label   "Autobind by Name"
            export  none
        }
        multiparm {
            name    "bindings"
            label    "Number of Bindings"
            baseparm
            default 0
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "multistartoffset" "1" }

            parm {
                name    "bindprimname#"
                baseparm
                label   "Primitive Name"
                export  none
            }
            parm {
                name    "bindprim#"
                baseparm
                label   "Primitive"
                export  none
            }
            parm {
                name    "bindname#"
                baseparm
                label   "VEX Parameter"
                export  none
            }
        }

        parm {
            name    "vex_geometrygenerator"
            baseparm
            label   "Only Output Created Geometry"
            export  none
        }
        parm {
            name    "vdb_signedflood"
            baseparm
            label   "Signed-Flood Fill Output SDF VDBs"
            export  none
        }
        parm {
            name    "vex_cwdpath"
            baseparm
            label   "Evaluation Node Path"
            export  none
        }
        parm {
            name    "vex_outputmask"
            baseparm
            label   "Export Parameters"
            export  none
        }
        parm {
            name    "vex_precision"
            baseparm
            label   "VEX Precision"
            export  none
        }
    }

    parm {
        name    "supersample_distance"
        label   "Supersample Distance"
        type    float
        default { "0" }
        range   { 0 1 }
    }
    parm {
        name    "up_axis"
        label   "Up Axis"
        type    integer
        default { "0" }
        range   { 0 10 }
    }
    parm {
        name    "supersample"
        label   "Supersample"
        type    integer
        default { "0" }
        range   { 0 10 }
    }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_coord.chn"
Content-Type: text/plain

{
    channel supersample_distance {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../supersample_dx\") }
    }
    channel up_axis {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../normal\") }
    }
    channel supersample {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enable_supersample\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_coord.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	0	)
group	[ 0	locks=0 ]	(	""	)
bindeach	[ 0	locks=0 ]	(	"off"	)
snippet	[ 0	locks=0 ]	(	"`chs(\"../point_coord/commoncode\")`

@__COORD_X = X;
@__COORD_Z = Z;
"	)
exportlist	[ 0	locks=0 ]	(	*	)
vex_strict	[ 0	locks=0 ]	(	"off"	)
autobind	[ 0	locks=0 ]	(	"on"	)
bindings	[ 0	locks=0 ]	(	0	)
vex_geometrygenerator	[ 0	locks=0 ]	(	"off"	)
vdb_signedflood	[ 0	locks=0 ]	(	"on"	)
vex_cwdpath	[ 0	locks=0 ]	(	.	)
vex_outputmask	[ 0	locks=0 ]	(	*	)
vex_precision	[ 0	locks=0 ]	(	auto	)
folder1	[ 0	locks=0 ]	(	0	0	)
supersample_distance	[ 0	locks=0 ]	(	[ supersample_distance	0 ] 	)
up_axis	[ 0	locks=0 ]	(	[ up_axis	0 ] 	)
supersample	[ 0	locks=0 ]	(	[ supersample	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/heightfield_coord.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_heightfield_coord.init"
Content-Type: text/plain

type = switch
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_heightfield_coord.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 13.6388 -1.72219
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
2 "output1"
}
inputsNamed3
{
0 	(0) "" 1 "input1"
1 	heightfield_coord 2 1 "input2"
}
inputs
{
0 	(0) 0 1
1 	heightfield_coord 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 1 0.7 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_heightfield_coord.chn"
Content-Type: text/plain

{
    channel input {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../input\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_heightfield_coord.parm"
Content-Type: text/plain

{
version 0.8
input	[ 0	locks=0 ]	(	[ input	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch_heightfield_coord.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_layer.init"
Content-Type: text/plain

type = blast
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_layer.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 13.6388 -4.28239
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	heightfield_deform 1 1 "input1"
}
inputs
{
0 	heightfield_deform 0 1
}
stat
{
  create -1
  modify -1
  author omarz@empress
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_layer.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	"@name=__COORD_X @name=__COORD_Z"	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
computenorms	[ 0	locks=0 ]	(	"off"	)
negate	[ 0	locks=0 ]	(	"off"	)
fillhole	[ 0	locks=0 ]	(	"off"	)
removegrp	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/delete__COORD_layer.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

16
output0
resample
get_length
first_curve
switch_input
point_deform
switch_target
heightfield_deform
resample_the_sequel
point_coord
switch_point_coord
delete__COORD_attrib
create__COORD
heightfield_coord
switch_heightfield_coord
delete__COORD_layer

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
