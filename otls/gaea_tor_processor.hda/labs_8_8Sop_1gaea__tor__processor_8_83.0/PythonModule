import xml.etree.ElementTree as ET
import subprocess, os, _winreg, sys


def GetGaeaRegistryInstall():
    try:
        hKey = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, r"Software\\QuadSpinner\\Gaea\\1.0")
        return os.path.normpath(_winreg.QueryValueEx(hKey, None)[0]).replace("\\", "/")
    except:
        raise hou.Error("Cannot Find Gaea installed.")

def ValidateGaeaInstalled(a_dir):
    if os.path.isdir(a_dir):
        if os.path.isfile(os.path.join(a_dir, "Gaea.Build.exe").replace("\\", "/")):
            return
    raise hou.Error("Cannot Find Gaea at specified location")

# This is the main function to process a Gaea Graph inside of Houdini
def ProcessTor(a_node):

    # Start Collection of Command Line Arguments
    gaea_dir = GetGaeaRegistryInstall()
    ValidateGaeaInstalled(gaea_dir)
    gaea_path = os.path.join(gaea_dir, "Gaea.Build.exe").replace("\\", "/")
    automation_file = a_node.parm("automation_file").evalAsString().replace("\\", "/")

    if automation_file == "" or not os.path.isfile(automation_file):
        raise hou.Error("Missing Automation Tor File.")

    if a_node.parm("generated_gaeaparms") == None:
        LoadXML(a_node)

    # Export All Maps
    a_node.node("Export_Layers").cook(force=True)
    

    # Get landscape resolution
    resolution = 512 # default of 512
    for prim in hou.node(a_node.path()+"/in").geometry().iterPrims():
        if (prim.type() == hou.primType.Volume):
            resolution = prim.resolution()[0]
            break

    cmd = ['"'+gaea_path+'"']
    cmd.append('"'+automation_file+'"')
    cmd.append("--silent")
    cmd.append("--unclamped")
    #cmd.append("--forcescale")
    cmd.append("--resolution%s" % nextPowerOf2(resolution))


    # These are the From and To parameter folders. All parms found here will be used for dynamic maps export/import
    ToGaeaParms = a_node.parmsInFolder(("Gaea Controls", "To Gaea"))
    FromGaeaParms = a_node.parmsInFolder(("Gaea Controls", "From Gaea"))
    MapsToExport = []

    # Dynamically Construct Command Line Arguments from parameter values
    for parm in a_node.parmsInFolder(("Gaea Controls", )):
        name = parm.name()
        value = parm.eval()

        # Check for Toggle
        if parm.parmTemplate().type() == hou.parmTemplateType.Toggle:
            value = "true" if value == 1 else "false"

        # Generating a name for the maps saved FROM Houdini
        if parm in ToGaeaParms:
            value = '"'+os.path.join(a_node.parm("sTempDir").evalAsString(), "render_%s_%s_%s.png" % (a_node.parm("sUniqueID").evalAsString(), a_node.parm("sExtraData").evalAsString(), value)).replace("\\", "/")+'"'
            if parm.evalAsString() == "":
                raise hou.NodeError('Missing "%s" input mapping in "To Gaea" parameter group.' % parm.description())

        # Generating a name for the maps read FROM Gaea
        if parm in FromGaeaParms:
            if a_node.parm("bCustomExport").evalAsInt() == 1:
                exportpath = a_node.parm("sFilePath").evalAsString()
                value = '"'+exportpath.replace("$(CHANNEL)", value).replace("$(EXTRADATA)", a_node.parm("sExtraData").evalAsString())+'"'
            else:
                value = '"'+os.path.join(a_node.parm("sTempDir").evalAsString(), "read_%s_%s_%s.tif" % (a_node.parm("sUniqueID").evalAsString(),a_node.parm("sExtraData").evalAsString(), value)).replace("\\", "/")+'"'
            MapsToExport.append(value)
            if parm.evalAsString() == "":
                raise hou.NodeError('Missing "%s" input mapping in "From Gaea" parameter group.' % parm.description())

        cmd.append("%s:%s" % (name, value))

    # Run Gaea with the provided Tor file and parameter values
    RunGaea(a_node, cmd, gaea_dir)

    if a_node.parm("pdg_logoutput").evalAsInt() == 1:
        for value in MapsToExport:
            print "OUTPUT_FILE: %s; file/image" % value[1:-1]

    
    # Forcing some node cooks
    a_node.node("extract_inputmaps").cook(force=True)
    a_node.node("reimport_maps_loop").parm("resetcookpass").pressButton()#cook(force=True)

# Optional parameter callback. Not used
def ParmCallback(a_node):
    return

# Run Gaea with specified command line arguments
def RunGaea(a_node, cmd, gaea_dir):

    hKey = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, r"Software\\QuadSpinner\\Gaea\\1.0") 
    version = _winreg.QueryValueEx(hKey, "Version")[0].split(".")[-1]
    version = int("".join(x for x in version if x.isdigit()))

    if version < 26:
        raise hou.Error("The plugin requires at least Gaea version 1.0.26 or newer to work")

    hide_gaea_dialog = a_node.parm("hide_gaea_dialog").eval()
    si = None
    if os.name == 'nt':  
        si = subprocess.STARTUPINFO()
        if hide_gaea_dialog:
            si.dwFlags |= subprocess.STARTF_USESHOWWINDOW

    with hou.InterruptableOperation(a_node.name(), open_interrupt_dialog=True) as Operation:
        Process = subprocess.Popen(" ".join(cmd), startupinfo=si, cwd=gaea_dir)

        # Process is still running
        while Process.poll() == None:
            try:
                Operation.updateProgress(0.0)
            # User interrupted
            except hou.OperationInterrupted:
                Process.kill()


# Resets entire interface with Gaea Parms
def ResetInterface(a_node):
    ParmGroup = a_node.parmTemplateGroup()

    if a_node.parm("generated_gaeaparms") != None:
        for spareparm in ParmGroup.find("generated_gaeaparms").parmTemplates():
            ParmGroup.remove(spareparm.name())
        ParmGroup.remove("generated_gaeaparms")
        a_node.setParmTemplateGroup(ParmGroup)
    
    ExtractEmbeddedTOR(a_node)
    LoadXML(a_node)

def nextPowerOf2(n): 
    p = 1
    if (n and not(n & (n - 1))): 
        return n 
    while (p < n): 
        p <<= 1   
    return p

def ExtractEmbeddedTOR(a_node):

    if a_node.parm("bUseEmbeddedPreset").evalAsInt() == 1:
        PresetEmbeddedAsset = a_node.parm("gaeapreset").evalAsString()
        if a_node.type().definition().hasSection(PresetEmbeddedAsset):
            OutputFile = os.path.join(hou.getenv("TEMP"), "preset_%s_%s_%s" % (a_node.parm("sUniqueID").evalAsString(),a_node.parm("sExtraData").evalAsString(), PresetEmbeddedAsset))
            SectionFile = file(OutputFile, "wb")
            SectionFile.write(a_node.type().definition().sections().get(PresetEmbeddedAsset).contents())
            SectionFile.close()

            a_node.parm("automation_file").set(OutputFile.replace("\\", "/"))

# Extract an XML file from a .Tor file, and dynamically generate a parameter interface for it
def LoadXML(a_node):


    # Mandatory Stuff
    gaea_dir = GetGaeaRegistryInstall()
    ValidateGaeaInstalled(gaea_dir)
    gaea_path = os.path.join(gaea_dir, "Gaea.Build.exe").replace("\\", "/")
    automation_file = a_node.parm("automation_file").evalAsString().replace("\\", "/")

    if not os.path.isfile(os.path.abspath("".join(automation_file))):
        return

    cmd = ['"'+gaea_path+'"']
    cmd.append('"'+automation_file+'"')
    cmd.append("--nodemap")
    cmd.append("--silent")

    # Extract XML parm File
    RunGaea(a_node, cmd, gaea_dir)

    if not os.path.isfile(os.path.abspath("".join(automation_file.split(".")[:-1])+".xml")):
        return

    XMLTree = ET.parse(os.path.abspath("".join(automation_file.split(".")[:-1])+".xml"))
    XMLRoot = XMLTree.getroot()
    ParmGroup = a_node.parmTemplateGroup()
    FolderGroup = a_node.parm("generated_gaeaparms")

    if FolderGroup == None:
        FolderGroup = hou.FolderParmTemplate("generated_gaeaparms", "Gaea Controls", folder_type=hou.folderType.Simple, ends_tab_group=True)
        ParmGroup.insertAfter(ParmGroup.findIndices("sepparm"), FolderGroup)

        HoudiniOutputFolder = hou.FolderParmTemplate("generated_houdinioutputfolder", "To Gaea", folder_type=hou.folderType.Simple, ends_tab_group=True)
        ParmGroup.appendToFolder(ParmGroup.find("generated_gaeaparms"), HoudiniOutputFolder)

        HoudiniInputFolder = hou.FolderParmTemplate("generated_houdiniinputfolder", "From Gaea", folder_type=hou.folderType.Simple, ends_tab_group=True)
        ParmGroup.appendToFolder(ParmGroup.find("generated_gaeaparms"), HoudiniInputFolder)# (ParmGroup.findIndices("sepparm"), HoudiniOutputFolder)


    # CREATE SIMPLE FOLDER FOR PARMS IN AND OUT (But out = in, and in = out)


    for x, item in enumerate(XMLRoot):
        if item.tag == "Parameter":
            LineEntry = item.attrib
            
            name = LineEntry['Variable']
            label = LineEntry['Name']
            type = LineEntry['Type']
            default = LineEntry['Default']


            # If these parms don't exist yet.. Create them
            if a_node.parm(name) == None:
                SpareParm = None

                if type == "int":
                    SpareParm = hou.IntParmTemplate(name, label, 1, default_value=(int(default),), min=int(LineEntry['Min']), max=int(LineEntry['Max']), min_is_strict=True, max_is_strict=True, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.insertBefore(ParmGroup.find("generated_houdinioutputfolder"), SpareParm)

                elif type == "double":
                    SpareParm = hou.FloatParmTemplate(name, label, 1, default_value=(float(default),), min=float(LineEntry['Min']), max=float(LineEntry['Max']), min_is_strict=True, max_is_strict=True, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.insertBefore(ParmGroup.find("generated_houdinioutputfolder"), SpareParm)

                elif type == "bool":
                    SpareParm = hou.ToggleParmTemplate(name, label, default_value=eval(default), script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.insertBefore(ParmGroup.find("generated_houdinioutputfolder"), SpareParm)

                elif type == "choice":
                    MenuValues = tuple(LineEntry['Choices'].split(','))
                    SpareParm = hou.MenuParmTemplate(name, label, menu_items=MenuValues, default_value=int(default), menu_type=hou.menuType.Normal, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.insertBefore(ParmGroup.find("generated_houdinioutputfolder"), SpareParm)

                elif type == "in":
                    SpareParm = hou.StringParmTemplate(name, label, 1, default_value=(default,), string_type=hou.stringParmType.Regular, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    SpareParm.setMenuType(hou.menuType.StringReplace)
                    SpareParm.setItemGeneratorScript("import hou\ntry:\n    AllModuleNames = set(kwargs['node'].node('in').geometry().primStringAttribValues('name'))\n    ModulePairs = [[x, x] for x in AllModuleNames]\n    return sum(ModulePairs, [])\nexcept:\n    return ['', '']")
                    SpareParm.setItemGeneratorScriptLanguage(hou.scriptLanguage.Python)

                    ParmGroup.appendToFolder(ParmGroup.find("generated_houdinioutputfolder"), SpareParm)

                elif type == "out":
                    SpareParm = hou.StringParmTemplate(name, label, 1, default_value=(default,), string_type=hou.stringParmType.Regular, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    SpareParm.setItemGeneratorScript("import hou\ntry:\n    AllModuleNames = set(kwargs['node'].node('in').geometry().primStringAttribValues('name'))\n    ModulePairs = [[x, x] for x in AllModuleNames]\n    return sum(ModulePairs, [])\nexcept:\n    return ['', '']")
                    SpareParm.setItemGeneratorScriptLanguage(hou.scriptLanguage.Python)
                    SpareParm.setMenuType(hou.menuType.StringReplace)

                    ParmGroup.appendToFolder(ParmGroup.find("generated_houdiniinputfolder"), SpareParm)

                else:
                    raise hou.Error("%s %s %s %s cannot be processed." % (name, label, type, default))

    a_node.setParmTemplateGroup(ParmGroup)