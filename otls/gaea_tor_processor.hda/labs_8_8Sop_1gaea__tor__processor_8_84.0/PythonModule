import xml.etree.ElementTree as ET
import subprocess, os, platform



def GetGaeaRegistryInstall(a_node):
    if platform.system() == "Windows":

        try:
            import _winreg as winreg
        except:
            import winreg

        try:
            if a_node.parm("bBleedingEdge").evalAsInt() == 1:
                hKey = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\\QuadSpinner\\Gaea Bleeding Edge\\1.0")
            else:
                hKey = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\\QuadSpinner\\Gaea\\1.0")
            return os.path.normpath(winreg.QueryValueEx(hKey, None)[0]).replace("\\", "/"), winreg.QueryValueEx(hKey, "Version")[0][2:5]     
        except:
            raise hou.Error("Cannot Find Gaea installed.")



def ValidateGaeaInstalled(a_dir):
    if os.path.isdir(a_dir):
        if os.path.isfile(os.path.join(a_dir, "Gaea.Build.exe").replace("\\", "/")):
            return
    raise hou.Error("Cannot Find Gaea at specified location")



def GetAutomationFile(a_node):
    returnvalue = a_node.parm("automation_file").evalAsString()

    if returnvalue.startswith("opdef:"):

        returnvalue = a_node.parm("automation_file").rawValue()

        fullrelativepath = returnvalue.split(":")[-1]
        components = fullrelativepath.split("?")
        relativepath = components[0]
        file = components[1]

        targetnodedef = a_node.node(relativepath).type().definition()   
        tempfile = hou.expandString("$HOUDINI_TEMP_DIR/{}".format(file))

        if targetnodedef.hasSection(file):
            with open(tempfile, 'wb') as sectionfile:
                try:
                    sectionfile.write(targetnodedef.sections().get(file).binaryContents())
                except:
                    sectionfile.write(targetnodedef.sections().get(file).contents())

            returnvalue = tempfile

    return returnvalue.replace("\\", "/")



# This is the main function to process a Gaea Graph inside of Houdini
def ProcessTor(a_node):

    # Start Collection of Command Line Arguments
    gaea_dir, version = GetGaeaRegistryInstall(a_node)
    ValidateGaeaInstalled(gaea_dir)
    gaea_path = os.path.join(gaea_dir, "Gaea.Build.exe").replace("\\", "/")
    automation_file = GetAutomationFile(a_node)

    # Generates the automation file xml
    _cmd = '"'+gaea_path+'" "'+automation_file+'" --nodemap"'
    _cmd = _cmd.replace("/","\\")
    os.system('"'+_cmd)
    # Community contribution by Bleeck (from SideFX Forum)
    
    if automation_file == "" or not os.path.isfile(automation_file):
        raise hou.Error("Missing Automation Tor File.")

    if a_node.parm("generated_gaeaparms") is None:
        LoadXML(a_node)

    # Export All Maps
    a_node.node("EXPORT").cook(force=True)

    # Get landscape resolution
    resolution = 512 # default of 512
    for prim in hou.node(a_node.path()+"/in").geometry().iterPrims():
        if (prim.type() == hou.primType.Volume):
            resolution = prim.resolution()[0]
            break

    cmd = ['"'+gaea_path+'"']
    cmd.append('"'+automation_file+'"')
    cmd.append("--silent")
    if a_node.parm("bDeterministic").evalAsInt() == 1:
        cmd.append("--cpulimit1")
    cmd.append("--resolution{0}".format(nextPowerOf2(resolution)))
    cmd.append("--houdini")

    # These are the From and To parameter folders. All parms found here will be used for dynamic maps export/import
    ToGaeaParms = a_node.parmsInFolder(("Gaea Controls", "To Gaea"))
    FromGaeaParms = a_node.parmsInFolder(("Gaea Controls", "From Gaea"))
    MapsToExport = []


    # Dynamically Construct Command Line Arguments from parameter values
    for parm in a_node.parmsInFolder(("Gaea Controls", )):

        name = parm.name()
        value = parm.eval()

        # Check for Toggle
        if parm.parmTemplate().type() == hou.parmTemplateType.Toggle:
            value = "true" if value == 1 else "false"
            #SanitizedName = "_".join(name.split("_")[1:])
            cmd.append("{0}:{1}".format(name, value))

        # Generating a name for the maps saved FROM Houdini
        elif parm in ToGaeaParms:
            value = '"'+os.path.join(a_node.parm("sTempDir").evalAsString(), "render_{0}_{1}_{2}.r32".format(a_node.parm("sUniqueID").evalAsString(), a_node.parm("sExtraData").evalAsString(), value)).replace("\\", "/")+'"'
            if parm.evalAsString() == "":
                raise hou.NodeError('Missing "{0}" input mapping in "To Gaea" parameter group.'.format(parm.description()))
            cmd.append("{0}:{1}".format(name, value))

        # Generating a name for the maps read FROM Gaea
        elif parm in FromGaeaParms:
            NameComponents = name.split("_")
            if a_node.parm("bCustomExport").evalAsInt() == 1:
                exportpath = a_node.parm("sFilePath").evalAsString()
                value = '"'+exportpath.replace("$(CHANNEL)", value).replace("$(EXTRADATA)", a_node.parm("sExtraData").evalAsString())+'"'
            else:
                Extension = "r32" if NameComponents[0] == "c1" else "png"
                SanitizedName = "_".join(name.split("_")[1:])
                value = '"'+os.path.join(a_node.parm("sTempDir").evalAsString(), "read_{0}_{1}_{2}.{3}".format(a_node.parm("sUniqueID").evalAsString(),a_node.parm("sExtraData").evalAsString(), value, Extension)).replace("\\", "/")+'"'
                
            MapsToExport.append(value)
            if parm.evalAsString() == "":
                raise hou.NodeError('Missing "{0}" input mapping in "From Gaea" parameter group.'.format(parm.description()))
            SanitizedName = "_".join(name.split("_")[1:])
            cmd.append("{0}:{1}".format(SanitizedName, value))

        else:
            cmd.append("{0}:{1}".format(name, value))

    # Forces Gaea to output to the specified Cache Directory
    cmd.append("--folder:\"{0}\"".format(a_node.parm("sTempDir").evalAsString()))
    # Community contribution by Bleeck (from SideFX Forum)       
    
    # Run Gaea with the provided Tor file and parameter values
    RunGaea(a_node, cmd, gaea_dir)
    
    # Cleanup
    for _a_map in MapsToExport:

        _g_file_name = _a_map[_a_map.find("__") + 2:-1]
        _r_file_path = _a_map[1:_a_map.rfind("/")] + "/"
        _gaea_file = _r_file_path + _g_file_name
        _houdini_file = _a_map[1:-1]

        if (os.path.exists(_gaea_file)):

            if(os.path.exists(_houdini_file)):
                os.remove(_houdini_file)

            os.rename(_gaea_file, _houdini_file)
    # Community contribution by Bleeck (from SideFX Forum)

    if a_node.parm("pdg_logoutput").evalAsInt() == 1:
        for value in MapsToExport:
            print("OUTPUT_FILE: {0}; file/image".format(value[1:-1]))
    
    # Forcing some node cooks
    a_node.node("extract_inputmaps").cook(force=True)
    a_node.node("import_maps").cook(force=True)



# Run Gaea with specified command line arguments
def RunGaea(a_node, cmd, gaea_dir):

    gaea_dir, version = GetGaeaRegistryInstall(a_node)

    if float(version) < 2.0:
        raise hou.Error("The plugin requires at least Gaea version 1.2 or newer to work")

    hide_gaea_dialog = a_node.parm("hide_gaea_dialog").eval()
    si = None

    if os.name == 'nt':

        si = subprocess.STARTUPINFO()
        if hide_gaea_dialog:
            si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            
    with hou.InterruptableOperation(a_node.name(), open_interrupt_dialog=True) as Operation:
        Process = subprocess.Popen(" ".join(cmd), startupinfo=si, stdout=subprocess.PIPE, cwd=gaea_dir)
        # Process is still running
        while Process.poll() is None:
            try:
                Operation.updateProgress(0.0)
            # User interrupted
            except hou.OperationInterrupted:
                Process.kill()



# Resets entire interface with Gaea Parms
def ResetInterface(a_node):
    ParmGroup = a_node.parmTemplateGroup()

    if a_node.parm("generated_gaeaparms") is not None:
        for spareparm in ParmGroup.find("generated_gaeaparms").parmTemplates():
            ParmGroup.remove(spareparm.name())
        ParmGroup.remove("generated_gaeaparms")
        a_node.setParmTemplateGroup(ParmGroup)
    
    LoadXML(a_node)


def copyPresetsToUserPrefDir(node):

    if node.parm("sPresetDir").unexpandedString() == '$SIDEFXLABS/misc/gaea/':
        
        node.parm("sPresetDir").set('$HOUDINI_USER_PREF_DIR/SideFXLabs/misc/gaea/')

        src_dir = hou.text.expandString('$SIDEFXLABS/misc/gaea/')
        dst_dir = hou.text.expandString('$HOUDINI_USER_PREF_DIR/SideFXLabs/misc/gaea/')
    
        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)

        tor_files = []

        for file in os.listdir(src_dir):
            if file.endswith('.tor'):
                tor_files.append(file)

        import shutil
        
        for file_name in tor_files:
            if not os.path.isfile(dst_dir + file_name):

                shutil.copyfile(src_dir + file_name, dst_dir + file_name)

                if os.path.isfile(dst_dir + file_name):
                    print ("Preset {0} has been copied to {1}\n".format(file_name, dst_dir))


def SetFromPreset(a_node):
    copyPresetsToUserPrefDir(a_node)
    PresetFile = a_node.parm("sPresetFile").evalAsString()
    a_node.parm("automation_file").set(PresetFile.replace("\\", "/"))
    ResetInterface(a_node)



def nextPowerOf2(n): 
    p = 1
    if (n and not(n & (n - 1))): 
        return n 
    while (p < n): 
        p <<= 1   
    return p



def ParmCallback(a_node):
    pass



# Extract an XML file from a .Tor file, and dynamically generate a parameter interface for it
def LoadXML(a_node):

    # Mandatory Stuff
    gaea_dir, version = GetGaeaRegistryInstall(a_node)
    ValidateGaeaInstalled(gaea_dir)
    gaea_path = os.path.join(gaea_dir, "Gaea.Build.exe").replace("\\", "/")
    automation_file = GetAutomationFile(a_node)

    if not os.path.isfile(os.path.abspath("".join(automation_file))):
        raise hou.Error("Could not find TOR file. Please make sure to specify a valid path")

    cmd = ['"'+gaea_path+'"']
    cmd.append('"'+automation_file+'"')
    cmd.append("--nodemap")
    cmd.append("--silent")

    # Extract XML parm File
    RunGaea(a_node, cmd, gaea_dir)

    automation_xml = os.path.abspath(automation_file.replace(".tor", ".xml"))

    if not os.path.isfile(automation_xml):
        message = \
            "Could not load the XML file, likely because the specified Presets Directory has restricted writing access.\n"\
            "Try using a different Presets Directory and putting the TOR file there."
        raise hou.Error(message)

    XMLTree = ET.parse(automation_xml)
    XMLRoot = XMLTree.getroot()
    ParmGroup = a_node.parmTemplateGroup()
    FolderGroup = a_node.parm("generated_gaeaparms")

    if FolderGroup is None:
        FolderGroup = hou.FolderParmTemplate("generated_gaeaparms", "Gaea Controls", folder_type=hou.folderType.Simple, ends_tab_group=True)

    ParmGroup.insertAfter(ParmGroup.findIndices("sepparm"), FolderGroup)

    Groups = [x.attrib["Owner"] for x in XMLRoot if x.tag == "Parameter" and x.attrib["Type"] not in ["out", "in"]]
    for x, grp in enumerate(set(Groups)):
        NodeGroupFolder = hou.FolderParmTemplate("generated_grp_{0}".format(grp), grp, folder_type=hou.folderType.Simple, ends_tab_group=True)
        ParmGroup.appendToFolder(ParmGroup.find("generated_gaeaparms"), NodeGroupFolder)

    HoudiniOutputFolder = hou.FolderParmTemplate("generated_houdinioutputfolder", "To Gaea", folder_type=hou.folderType.Simple, ends_tab_group=True)
    ParmGroup.appendToFolder(ParmGroup.find("generated_gaeaparms"), HoudiniOutputFolder)

    HoudiniInputFolder = hou.FolderParmTemplate("generated_houdiniinputfolder", "From Gaea", folder_type=hou.folderType.Simple, ends_tab_group=True)
    ParmGroup.appendToFolder(ParmGroup.find("generated_gaeaparms"), HoudiniInputFolder)# (ParmGroup.findIndices("sepparm"), HoudiniOutputFolder)

    # CREATE SIMPLE FOLDER FOR PARMS IN AND OUT (But out = in, and in = out)
    for x, item in enumerate(XMLRoot):
        if item.tag == "Parameter":
            LineEntry = item.attrib
            
            name = LineEntry['Variable']
            label = LineEntry['Name']
            parmtype = LineEntry['Type']
            default = LineEntry['Default']
            owner = LineEntry["Owner"]

            # If these parms don't exist yet.. Create them
            if a_node.parm(name) == None:
                SpareParm = None

                if owner == "File" and label == "File" and parmtype not in ["out", "in"]:
                    label = name.replace("_", " ").title()

                if parmtype == "int":
                    SpareParm = hou.IntParmTemplate(name, label, 1, default_value=(int(default),), min=int(LineEntry['Min']), max=int(LineEntry['Max']), min_is_strict=True, max_is_strict=True, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.appendToFolder(ParmGroup.find("generated_grp_{0}".format(owner)), SpareParm)

                elif parmtype == "double":
                    SpareParm = hou.FloatParmTemplate(name, label, 1, default_value=(float(default),), min=float(LineEntry['Min']), max=float(LineEntry['Max']), min_is_strict=True, max_is_strict=True, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.appendToFolder(ParmGroup.find("generated_grp_{0}".format(owner)), SpareParm)

                elif parmtype == "bool":
                    SpareParm = hou.ToggleParmTemplate(name, label, default_value=eval(default), script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.appendToFolder(ParmGroup.find("generated_grp_{0}".format(owner)), SpareParm)

                elif parmtype == "choice":
                    MenuValues = tuple(LineEntry['Choices'].split(','))
                    SpareParm = hou.MenuParmTemplate(name, label, menu_items=MenuValues, default_value=int(default), menu_type=hou.menuType.Normal, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    ParmGroup.appendToFolder(ParmGroup.find("generated_grp_{0}".format(owner)), SpareParm)

                elif parmtype == "in":
                    SpareParm = hou.StringParmTemplate(name, label, 1, default_value=(default,), string_type=hou.stringParmType.Regular, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    SpareParm.setMenuType(hou.menuType.StringReplace)
                    SpareParm.setItemGeneratorScript("import hou\ntry:\n    AllModuleNames = set(kwargs['node'].node('in').geometry().primStringAttribValues('name'))\n    ModulePairs = [[x, x] for x in AllModuleNames]\n    return sum(ModulePairs, [])\nexcept:\n    return ['', '']")
                    SpareParm.setItemGeneratorScriptLanguage(hou.scriptLanguage.Python)

                    ParmGroup.appendToFolder(ParmGroup.find("generated_houdinioutputfolder"), SpareParm)

                elif parmtype == "out":
                    Channels = LineEntry["Channels"]
                    SpareParm = hou.StringParmTemplate("c" +Channels+ "_" + name, label, 1, default_value=(default,), string_type=hou.stringParmType.Regular, script_callback='kwargs["node"].hm().ParmCallback(kwargs["node"])', script_callback_language=hou.scriptLanguage.Python)
                    
                    SpareParm.setItemGeneratorScript("import hou\ntry:\n    AllModuleNames = set(kwargs['node'].node('in').geometry().primStringAttribValues('name'))\n    ModulePairs = [[x, x] for x in AllModuleNames]\n    return sum(ModulePairs, [])\nexcept:\n    return ['', '']")
                    SpareParm.setItemGeneratorScriptLanguage(hou.scriptLanguage.Python)
                    SpareParm.setMenuType(hou.menuType.StringReplace)

                    ParmGroup.appendToFolder(ParmGroup.find("generated_houdiniinputfolder"), SpareParm)

                else:
                    raise hou.Error("{0} {1} {2} {3} cannot be processed.".format(name, label, parmtype, default))

    a_node.setParmTemplateGroup(ParmGroup)
    os.remove(automation_xml)