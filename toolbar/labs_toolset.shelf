<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="labs_toolset" label="SideFX Labs">
    <memberTool name="update_toolset"/>
    <memberTool name="labs::autouv"/>
    <memberTool name="labs::visualize_uvs"/>
    <memberTool name="labs::maps_baker"/>
    <memberTool name="remeshgrid"/>
    <memberTool name="labs::vertex_animation_textures"/>
    <memberTool name="labs::texture_sheets"/>
    <memberTool name="labs::make_loop"/>
    <memberTool name="labs::osm_import"/>
    <memberTool name="labs::csv_exporter"/>
    <memberTool name="labs::rbd_to_fbx"/>
    <memberTool name="labs::volume_texture"/>
    <memberTool name="labs::detail_mesh"/>
    <memberTool name="labs::enable_go_z"/>
    <memberTool name="labs::ruler"/>
    <memberTool name="labs::parameter_diff"/>
    <memberTool name="labs::networkwalk"/>
    <memberTool name="labs::preferences"/>
  </toolshelf>

  <tool name="labs::autouv" label="Auto UV" icon="opdef:/labs::Sop/autouv?IconSVG">
    <helpURL>operator:Sop/autouv?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::autouv', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::visualize_uvs" label="UV Visualize" icon="opdef:/labs::Sop/visualize_uvs?IconSVG">
    <helpURL>operator:Sop/visualize_uvs?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::visualize_uvs', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::maps_baker" label="MapsBaker" icon="opdef:/labs::Sop/maps_baker?IconSVG">
    <helpURL>operator:Sop/maps_baker-4.0?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::maps_baker', exact_node_type=False)]]></script>
  </tool>

  <tool name="remeshgrid" label="Remesh to Grid" icon="SOP_remeshgrid">
    <helpURL>operator:Sop/voxelmesh?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'remeshgrid', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::vertex_animation_textures" label="VAT" icon="opdef:/labs::Driver/vertex_animation_textures::3.0?IconSVG">
    <helpURL>operator:Driver/vertex_animation_textures?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[
rop = hou.node('/out').createNode("labs::vertex_animation_textures", exact_type_name=False)
rop.setSelected(True, True)
rop.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="labs::texture_sheets" label="T Sheets" icon="opdef:/labs::Driver/texture_sheets::2.0?IconSVG">
    <helpURL>operator:Driver/texture_sheets-2.0?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[
rop = hou.node('/out').createNode("labs::texture_sheets", exact_type_name=False)
rop.setSelected(True, True)
rop.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="labs::make_loop" label="Make Loop" icon="opdef:/labs::Sop/make_loop?IconSVG">
    <helpURL>operator:Sop/make_loop?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::make_loop', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::osm_import" label="OSM Import" icon="opdef:/labs::Sop/osm_import?IconSVG">
    <helpURL>operator:Sop/osm_import?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::osm_import', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::csv_exporter" label="CSV Exporter" icon="opdef:/labs::Driver/csv_exporter?IconSVG">
    <helpURL>operator:Driver/csv_exporter?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[
rop = hou.node('/out').createNode("labs::csv_exporter", exact_type_name=False)
rop.setSelected(True, True)
rop.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="labs::rbd_to_fbx" label="RBD to FBX" icon="opdef:/labs::Driver/rbd_to_fbx?IconSVG">
    <helpURL>operator:Driver/rbd_to_fbx-2.0?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[
rop = hou.node('/out').createNode("labs::rbd_to_fbx", exact_type_name=False)
rop.setSelected(True, True)
rop.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="labs::volume_texture" label="VDB Textures" icon="opdef:/labs::Sop/volume_texture?IconSVG">
    <helpURL>operator:Sop/volume_texture?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::volume_texture', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::enable_go_z" label="Start GoZ" icon="GoZBrush.png">
    <script scriptType="python"><![CDATA[import hrpyc
already_running = True

try:
    connection = hrpyc.rpyc.classic.connect("127.0.0.1", 18811)
except:
    already_running = False

if already_running:
    hou.ui.displayMessage("Go Z Already Running")
else:
    hrpyc.start_server()
    hou.ui.displayMessage("Go Z Port Opened")

temp_goz_node = hou.node("/obj").createNode("geo", "tmp_zbrush")
temp_goz_node.createNode("labs::goz_export", exact_type_name=False)
temp_goz_node.destroy()]]></script>
  </tool>

  <tool name="labs::detail_mesh" label="Detail Mesh" icon="opdef:/labs::Sop/detail_mesh?IconSVG">
    <helpURL>operator:Sop/detail_mesh?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::detail_mesh', exact_node_type=False)]]></script>
  </tool>

  <tool name="labs::networkwalk" label="Network Walk" icon="$SIDEFXLABS/help/icons/networkwalk.svg">
    <helpURL>/shelf/labs--networkwalk.txt</helpURL>
    <script scriptType="python"><![CDATA[from labsopui import networkwalk

action = hou.ui.displayMessage("Would you like to assign or remove Network Walk hotkeys?", buttons=('Assign',"Remove","Cancel"), severity=hou.severityType.Message, default_choice=2, close_choice=2, help=None, title="Network Walk", details=None, details_label=None, details_expanded=False)

if action == 0:
    networkwalk.add_actions()
elif action == 1:
    networkwalk.remove_actions()]]></script>
  </tool>

  <tool name="labs::networkwalk_Up" label="Network Walk" icon="$SIDEFXLABS/help/icons/networkwalk.svg">
    <helpURL>/shelf/labs--networkwalk.txt</helpURL>
    <script scriptType="python"><![CDATA[from labsopui import networkwalk
networkwalk.walk(step='up',**kwargs)]]></script>
  </tool>

  <tool name="labs::networkwalk_Down" label="Network Walk" icon="$SIDEFXLABS/help/icons/networkwalk.svg">
    <helpURL>/shelf/labs--networkwalk.txt</helpURL>
    <script scriptType="python"><![CDATA[from labsopui import networkwalk
networkwalk.walk(step='down',**kwargs)]]></script>
  </tool>

  <tool name="labs::networkwalk_Left" label="Network Walk" icon="$SIDEFXLABS/help/icons/networkwalk.svg">
    <helpURL>/shelf/labs--networkwalk.txt</helpURL>
    <script scriptType="python"><![CDATA[from labsopui import networkwalk
networkwalk.walk(step='left',**kwargs)]]></script>
  </tool>

  <tool name="labs::networkwalk_Right" label="Network Walk" icon="$SIDEFXLABS/help/icons/networkwalk.svg">
    <helpURL>/shelf/labs--networkwalk.txt</helpURL>
    <script scriptType="python"><![CDATA[from labsopui import networkwalk
networkwalk.walk(step='right',**kwargs)]]></script>
  </tool>

  <tool name="labs::preferences" label="Preferences" icon="$SIDEFXLABS/help/icons/preferences.svg">
    <script scriptType="python"><![CDATA[import labprefs
window = labprefs.LabsPreferences(hou.qt.mainWindow())
window.show()]]></script>
  </tool>

  <tool name="labs::sticker_placer" label="Sticker Placer" icon="$SIDEFXLABS/help/icons/stickerplacer.svg">
    <helpURL>/nodes/other/labs--sticker_picker</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[from labsopui import stickerplacer as module

try:
  reload(module)
except NameError:
  from importlib import reload
  reload(module)

dialog = module.StickerPlacer(hou.qt.mainWindow())
dialog.show()
]]></script>
  </tool>

  <tool name="labs::ruler" label="Ruler" icon="$SIDEFXLABS/help/icons/ruler.svg">
    <helpURL>/shelf/labs--ruler.txt</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import stateutils

# We want to launch a SOP state, so we need to make sure the
# viewer is at the SOP level first
viewer = stateutils.findSceneViewer()
network = viewer.pwd()
if network.childTypeCategory() != hou.sopNodeTypeCategory():
    # The user pressed Enter without selecting an object
    raise hou.Error("You must be in a sop network to use this tool.")
if network.displayNode() == None:
    raise hou.Error("You must have the display flag set on a node.")
# Set the viewer's current state to my state
viewer.setCurrentState("labs::ruler")
]]></script>
  </tool>

  <tool name="labs::parameter_diff" label="Parameter Diff" icon="$SIDEFXLABS/help/icons/parameter_diff.svg">
    <helpURL>/shelf/labs--parameter_diff.txt</helpURL>
    <script scriptType="python"><![CDATA[import pyper.widgets.diff as diffmodule

try:
  reload(diffmodule)
except NameError:
  from importlib import reload
  reload(diffmodule)

win = diffmodule.run()
hou.session.dummy = win]]></script>
  </tool>
</shelfDocument>
