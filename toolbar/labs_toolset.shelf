<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="labs_toolset" label="SideFX Labs">
    <memberTool name="update_toolset"/>
    <memberTool name="labs::autouv"/>
    <memberTool name="labs::visualize_uvs"/>
    <memberTool name="labs::simple_baker"/>
    <memberTool name="labs::axis_align"/>
    <memberTool name="labs::voxelmesh"/>
    <memberTool name="labs::vertex_animation_textures"/>
    <memberTool name="labs::texture_sheets"/>
    <memberTool name="labs::fire_presets"/>
    <memberTool name="labs::make_loop"/>
    <memberTool name="labs::osm_import"/>
    <memberTool name="labs::csv_exporter"/>
    <memberTool name="labs::rbd_to_fbx"/>
    <memberTool name="labs::volume_texture"/>
    <memberTool name="labs::detail_mesh"/>
    <memberTool name="labs::sweep_geometry"/>
    <memberTool name="labs::enable_go_z"/>
  </toolshelf>

  <tool name="labs::autouv" label="Auto UV" icon="opdef:/labs::Sop/autouv?IconSVG">
    <helpURL>operator:Sop/autouv?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::autouv')]]></script>
  </tool>

  <tool name="labs::visualize_uvs" label="UV Visualize" icon="opdef:/labs::Sop/visualize_uvs?IconSVG">
    <helpURL>operator:Sop/visualize_uvs?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::visualize_uvs')]]></script>
  </tool>

  <tool name="labs::simple_baker" label="Simple Baker" icon="opdef:/labs::Sop/simple_baker?IconSVG">
    <helpURL>operator:Sop/simple_baker?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::simple_baker')]]></script>
  </tool>

  <tool name="labs::axis_align" label="Axis Align" icon="opdef:/labs::Sop/axis_align?IconSVG">
    <helpURL>operator:Sop/axis_align?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::axis_align')]]></script>
  </tool>

  <tool name="labs::voxelmesh" label="Voxel Mesh" icon="opdef:/labs::Sop/voxelmesh?IconSVG">
    <helpURL>operator:Sop/voxelmesh?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::voxelmesh')]]></script>
  </tool>

  <tool name="labs::vertex_animation_textures" label="VAT" icon="opdef:/labs::Driver/vertex_animation_textures::2.0?IconSVG">
    <helpURL>operator:Driver/vertex_animation_textures</helpURL>
    <script scriptType="python"><![CDATA[import roptoolutils
roptoolutils.createRenderNode("labs::vertex_animation_textures::2.0")
]]></script>
  </tool>

  <tool name="labs::texture_sheets" label="T Sheets" icon="opdef:/labs::Driver/texture_sheets::2.0?IconSVG">
    <helpURL>operator:Driver/texture_sheets</helpURL>
    <script scriptType="python"><![CDATA[import roptoolutils
roptoolutils.createRenderNode("labs::texture_sheets::2.0")
]]></script>
  </tool>

  <tool name="labs::fire_presets" label="Fire Preset" icon="opdef:/labs::Object/fire_presets?IconSVG">
    <helpURL>operator:Object/fire_presets?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.customStateTool(kwargs, 'labs::fire_presets')]]></script>
  </tool>

  <tool name="labs::sweep_geometry" label="Sweep Geo" icon="opdef:/labs::Sop/sweep_geometry?IconSVG">
    <helpURL>operator:Sop/sweep_geometry?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::sweep_geometry')]]></script>
  </tool>

  <tool name="labs::make_loop" label="Make Loop" icon="opdef:/labs::Sop/make_loop?IconSVG">
    <helpURL>operator:Sop/make_loop?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::make_loop')]]></script>
  </tool>

  <tool name="labs::osm_import" label="OSM Import" icon="opdef:/labs::Sop/osm_import?IconSVG">
    <helpURL>operator:Sop/osm_import?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::osm_import')]]></script>
  </tool>

  <tool name="labs::csv_exporter" label="CSV Exporter" icon="opdef:/labs::Driver/csv_exporter?IconSVG">
    <helpURL>operator:Driver/csv_exporter?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import roptoolutils
roptoolutils.createRenderNode("labs::csv_exporter")
]]></script>
  </tool>

  <tool name="labs::rbd_to_fbx" label="RBD to FBX" icon="opdef:/labs::Driver/rbd_to_fbx?IconSVG">
    <helpURL>operator:Driver/rbd_to_fbx?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import roptoolutils
roptoolutils.createRenderNode("labs::rbd_to_fbx")
]]></script>
  </tool>

  <tool name="labs::volume_texture" label="VDB Textures" icon="opdef:/labs::Sop/volume_texture?IconSVG">
    <helpURL>operator:Sop/volume_texture?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::volume_texture')]]></script>
  </tool>

  <tool name="labs::enable_go_z" label="Start GoZ" icon="GoZBrush.png">
    <script scriptType="python"><![CDATA[import hrpyc
already_running = True

try:
    connection = hrpyc.rpyc.classic.connect("127.0.0.1", 18811)
except:
    already_running = False

if already_running:
    hou.ui.displayMessage("Go Z Already Running")
else:
    hrpyc.start_server()
    hou.ui.displayMessage("Go Z Port Opened")

temp_goz_node = hou.node("/obj").createNode("geo", "tmp_zbrush")
temp_goz_node.createNode("labs::goz_export")
temp_goz_node.destroy()]]></script>
  </tool>

  <tool name="labs::detail_mesh" label="Detail Mesh" icon="opdef:/labs::Sop/detail_mesh?IconSVG">
    <helpURL>operator:Sop/detail_mesh?namespace=labs</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.genericTool(kwargs, 'labs::detail_mesh')]]></script>
  </tool>

  <tool name="flowmap_brush" label="Labs Flowmap Brush" icon="flowmap_brush.svg">
    <helpURL>operator:Sop/comb</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/comb</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Labs/FlowMap</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('comb'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_flowmap_brush (Sop/comb)
set _obj_geo1_flowmap_brush = `run("opadd -e -n -v comb flowmap_brush")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_flowmap_brush
opparm -V 16.5.611 $_obj_geo1_flowmap_brush switcher ( 0 0 0 0 ) ovrnml ( on ) nmlname ( v ) opacity ( 0.5 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_flowmap_brush
opexprlanguage -s hscript $_obj_geo1_flowmap_brush
opset -p on $_obj_geo1_flowmap_brush

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_flowmap_brush
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_flowmap_brush
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
