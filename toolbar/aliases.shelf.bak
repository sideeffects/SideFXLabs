<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="labs::voxelmesh" label="Labs Voxel Mesh" icon="$SIDEFXLABS/help/icons/voxel_mesh_alt.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Convert</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
soptoolutils.genericTool(kwargs, 'remeshgrid', exact_node_type=False)
]]></script>
  </tool>

  <tool name="flowmap_brush" label="Labs Flowmap Brush" icon="flowmap_brush.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/World Building/Water</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'comb' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_comb1 (Sop/comb)
set _obj_geo1_comb1 = `run("opadd -e -n -v comb comb1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_comb1
opparm -V 18.5.393 $_obj_geo1_comb1 switcher ( 1 1 1 1 ) ovrnml ( on ) nmlname ( v ) opacity ( 0.5 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_comb1
opexprlanguage -s hscript $_obj_geo1_comb1
opset -p on $_obj_geo1_comb1

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_comb1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_comb1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)

]]></script>
  </tool>

  <tool name="labs::color_adjustment" label="Labs Color Adjustment" icon="SOP_attribadjustcolor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'attribadjustcolor', exact_node_type=False)
node.setParms({"adjustvalue": 0, "enable_cc": 1, "enable_postprocess": 1, "dobrightness":1, "docontrast":1, "dosat":1, "dogamma":1})
]]></script>
  </tool>

  <tool name="labs::color_gradient" label="Labs Color Gradient" icon="SOP_attribadjustcolor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'attribadjustcolor', exact_node_type=False)
node.setParms({"valuetype": "bbox", "bounddir": 1})
node.parm("colorramp").set(hou.Ramp((hou.rampBasis.Linear, hou.rampBasis.Linear), (0, 1), ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0))))
]]></script>
  </tool>

  <tool name="labs::rokoko_mocap" label="Labs Rokoko Mocap" icon="SOP_kinefx-mocapstream">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Character &amp; Animation/Performance Capture</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'kinefx::mocapstream', exact_node_type=False)
node.setParms({"device": "rokoko"})
]]></script>
  </tool>

  <tool name="labs::neuron_mocap" label="Labs Neuron Mocap" icon="SOP_kinefx-mocapstream">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Character &amp; Animation/Performance Capture</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'kinefx::mocapstream', exact_node_type=False)
node.setParms({"device": "neuron"})
]]></script>
  </tool>

  <tool name="labs::multi_file" label="Labs Multi File" icon="SOP_file">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Pipeline/Import</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'filemerge::2.0', exact_node_type=False)
node.setParms({"enablerange": 0})
]]></script>
  </tool>

  <tool name="labs::curve_sweep" label="Labs Curve Sweep" icon="SOP_sweep-2.0">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Curve</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'sweep', exact_node_type=False)
node.setParms({"surfaceshape": "tube", "cols":32, "computeuvs":1, "applyscale":1, "endcaptype":"grid", "capscale":0.0, "capdivs":1})
]]></script>
  </tool>

  <tool name="labs::calculate_occlusion" label="Labs Calculate Occlusion" icon="SOP_maskbyfeature">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Analysis</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'maskbyfeature', exact_node_type=False)
node.setParms({"enabledirection": 0, "castshadows":0, "enableao":1, "aobluriterations":30, "combinedmaskattrib":"Cd"})
]]></script>
  </tool>

  <tool name="labs::motion_vectors" label="Labs Motion Vectors" icon="$SIDEFXLABS/help/icons/texture_sheet.svg">
    <toolMenuContext name="viewer">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Real-Time Engine</toolSubmenu>
    <script scriptType="python"><![CDATA[
import drivertoolutils
node = drivertoolutils.genericTool(kwargs, 'labs::flipbook_textures', exact_node_type=False)
]]></script>
  </tool>

  <tool name="labs::delete_file" label="Delete File" icon="TOP_fileremove">
    <toolMenuContext name="viewer">
      <contextNetType>TOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>TOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Pipeline/Cache</toolSubmenu>
    <script scriptType="python"><![CDATA[
import drivertoolutils
node = drivertoolutils.genericTool(kwargs, 'fileremove', exact_node_type=False)
]]></script>
  </tool>

  <tool name="labs::remove_unconnected_points" label="Remove Unconnected Points" icon="SOP_add">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'add', exact_node_type=False)
node.setParms({'remove': 1})
node.setName('remove_unconnected_points1', True)
]]></script>
  </tool>

  <tool name="labs::remove_inline_points" label="Remove Inline Points" icon="SOP_facet">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'facet', exact_node_type=False)
node.setParms({'inline': 1})
node.setName('remove_inline_points1', True)
]]></script>
  </tool>

  <tool name="labs::remove_degenerate" label="Remove Degenerate" icon="SOP_facet">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'facet', exact_node_type=False)
node.setParms({'remove': 1})
node.setName('remove_degenerate1', True)
]]></script>
  </tool>

  <tool name="labs::remove_shared_edges" label="Remove Shared Edges" icon="SOP_divide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'divide', exact_node_type=False)
node.setParms({'convex':0, 'removesh': 1})
node.setName('remove_shared_edges1', True)
]]></script>
  </tool>

  <tool name="labs::triangulate" label="Triangulate" icon="SOP_divide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Convert</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'divide', exact_node_type=False)
node.setName('triangulate1', True)
]]></script>
  </tool>

  <tool name="labs::tangent" label="Tangent" icon="SOP_polyframe">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'polyframe', exact_node_type=False)
node.setParms({"style": "mikkt", "tangentvon": 1})
node.setName('tangent1', True)
]]></script>
  </tool>

  <tool name="labs::compute_dual_polygon" label="Compute Dual Polygon" icon="SOP_divide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Convert</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'divide', exact_node_type=False)
node.setParms({'convex': 0, 'dual': 1})
node.setName('compute_dual_polygon1', True)
]]></script>
  </tool>

  <tool name="labs::remove_all_faces" label="Remove All Faces" icon="SOP_convertline">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::edge_group_to_polylines', exact_node_type=False)
node.setParms({'edgegroup': '*'})
node.setName('remove_all_faces1', True)
]]></script>
  </tool>

  <tool name="labs::transform_from_centroid" label="Transform from Centroid" icon="SOP_xform">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Transform</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'xform', exact_node_type=False)
node.setParmExpressions({'px': 'centroid(0, D_X)', 'py': 'centroid(0, D_Y)', 'pz': 'centroid(0, D_Z)'})
node.setName('transform_from_centroid1', True)
]]></script>
  </tool>

  <tool name="labs::compilable_connectivity_and_segmentation" label="Compilable Segments" icon="$SIDEFXLABS/help/icons/sidefx_labs_default.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Partition</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

# The main node to place when dropping down this alias
node = soptoolutils.genericTool(kwargs, 'labs::connectivity_and_segmentation', exact_node_type=False)

# Gets the parent of the placed node to places sequential nodes in the series
parent_node = node.parent()

# Sequential nodes initialization
compile_begin = parent_node.createNode('compile_begin')
for_each_begin = parent_node.createNode('block_begin')
for_each_end = parent_node.createNode('block_end')
compile_end = parent_node.createNode('compile_end')
node_list = [node, compile_begin, for_each_begin, for_each_end, compile_end]

# Sets node inputs based on the node list order above
for i in range(1, 5):
    node_list[i].setInput(0, node_list[i-1], 0)

# Names first node to alias name and set for each nodes to familiar names
node.setName('compilable_segments', True)
for_each_begin.setName('foreach_begin1', True)
for_each_end.setName('foreach_end1', True)

# Sets default parameters
compile_begin.setParms({'blockpath': "../" + compile_end.name()})
for_each_begin.setParms({'blockpath': "../" + for_each_end.name(), 'method': 1})
for_each_end.setParms({'itermethod': 1, 'method': 1, 'class': 0, 'attrib': "segment"})
for_each_end.setParms({'blockpath': "../" + for_each_begin.name()})
for_each_end.setParms({'templatepath': "../" + for_each_begin.name()})
for_each_end.setParms({'multithread': 1})

# Sets compile blocks to familiar yellow color
compile_begin.setColor(hou.Color(0.75, 0.75, 0))
compile_end.setColor(hou.Color(0.75, 0.75, 0))

# Layouts nodes properly, giving the for each block more space for work area
parent_node.layoutChildren(node_list)
for_each_end.setPosition(for_each_begin.position() + hou.Vector2(0, -2))
compile_end.setPosition(for_each_end.position() + hou.Vector2(0, -1))
]]>
    </script>
  </tool>

  <tool name="labs::axis_align" label="Labs Axis Align" icon="SOP_matchsize">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Transform</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'matchsize', exact_node_type=False)
]]></script>
  </tool>

  <tool name="labs::correct_polygon_winding" label="Correct Polygon Winding" icon="SOP_polydoctor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Refine</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'polydoctor', exact_node_type=False)
node.setParms({'illformed': 0, 'fixwindings': 1})
node.setName('correct_polygon_winding1', True)
]]></script>
  </tool>

  <tool name="labs::tree_pivot_painter" label="Labs Tree PivotPainter" icon="$SIDEFXLABS/help/icons/sidefx_labs_default.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/World Building/Vegetation</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

# The main node to place when dropping down this alias
tree_hierarchy = soptoolutils.genericTool(kwargs, 'labs::tree_hierarchy', exact_node_type=False)

# Gets the parent of the placed node to places sequential nodes in the series
parent_node = tree_hierarchy.parent()

# Sequential nodes initialization
ue_pivotpainter = parent_node.createNode('labs::unreal_pivotpainter')
node_list = [tree_hierarchy, ue_pivotpainter]

ue_pivotpainter.setInput(0, tree_hierarchy, 0)
ue_pivotpainter.setInput(1, tree_hierarchy, 1)

# Layouts nodes properly
parent_node.layoutChildren(node_list)

# Renames first node to name of alias
tree_hierarchy.setName('tree_pivotpainter', True)

# Set Tree Hierarchy's second input to input's second output, if it exists
input = tree_hierarchy.input(0)
if len(input.outputConnectors()) > 1:
    tree_hierarchy.setInput(1, input, 1)
]]></script>
  </tool>
  
  <tool name="labs::remove_overlap" label="Remove Overlap" icon="SOP_polydoctor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'polydoctor', exact_node_type=False)
node.setParms({'maxpasses': 1, 'manyedges': 0, 'usemodifiedpts': 0, 'userepairedpoly': 0, 'usevalidpts': 0, 'usevalidpoly': 0})
node.setName('remove_overlap', True)
]]></script>
  </tool>

  <tool name="labs::remove_overlap_pair" label="Remove Overlap Pair" icon="SOP_polydoctor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Geometry/Mesh: Remove</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'polydoctor', exact_node_type=False)
node.setParms({'maxpasses': 1, 'manyedges': 0, 'usemodifiedpts': 0, 'userepairedpoly': 0, 'usevalidpts': 0, 'usevalidpoly': 0, 'pairoverlaps': 1})
node.setName('remove_overlap_pair1', True)
]]></script>
  </tool>

  <tool name="labs::volume_normal" label="Labs Volume Normal" icon="SOP_volumeadjustfog">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Simulation &amp; FX/Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::volume_adjust_look', exact_node_type=False)
node.setParms({'mode': 1})
node.setName('volume_normal1', True)
]]></script>
  </tool>

  <tool name="labs::volume_motion_vector" label="Labs Volume Motion Vector" icon="SOP_volumeadjustfog">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Simulation &amp; FX/Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::volume_adjust_look', exact_node_type=False)
node.setParms({'mode': 2})
node.setName('volume_motion_vector1', True)
]]></script>
  </tool>

  <tool name="labs::volume_greyscale" label="Labs Volume Greyscale" icon="SOP_volumeadjustfog">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Simulation &amp; FX/Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::volume_adjust_look', exact_node_type=False)
node.setParms({'greyscalemode': 1})
node.setName('volume_greyscale1', True)
]]></script>
  </tool>

  <tool name="labs::volume_temperature" label="Labs Volume Temperature" icon="SOP_volumeadjustfog">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Simulation &amp; FX/Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::volume_adjust_look', exact_node_type=False)
node.setParms({'greyscalemode': 1, 'adjustemitvol': 1})
node.parm('emitfield').setExpression('temperature')
node.parm('emitfield').deleteAllKeyframes()
node.parm('emitfield').set('temperature')
node.parm('emitfield').lock(True)
node.setName('volume_temperature1', True)
]]></script>
  </tool>

  <tool name="labs::volume_no_emission" label="Labs Volume No Emission" icon="SOP_volumeadjustfog">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Labs/Simulation &amp; FX/Pyro</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::volume_adjust_look', exact_node_type=False)
node.setParms({'emitscalemul': 0})
node.setName('volume_no_emission1', True)
]]></script>
  </tool>

</shelfDocument>